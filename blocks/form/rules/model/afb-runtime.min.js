/** ***********************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
* Copyright 2022 Adobe
* All Rights Reserved.
*
* NOTICE: All information contained herein is, and remains
* the property of Adobe and its suppliers, if any. The intellectual
* and technical concepts contained herein are proprietary to Adobe
* and its suppliers and are protected by all applicable intellectual
* property laws, including trade secret and copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe.

* Adobe permits you to use and modify this file solely in accordance with
* the terms of the Adobe license agreement accompanying it.
************************************************************************ */

/*
 *  Package: @aemforms/af-core
 *  Version: 0.22.121
 */
import {
  propertyChange as e, ExecuteRule as t, Initialize as n, RemoveItem as i, Change as s, FormLoad as r, FieldChanged as a, ValidationComplete as o, Valid as l, Invalid as u, SubmitSuccess as d, CustomEvent as h, SubmitError as c, SubmitFailure as p, Submit as m, Save as f, Reset as g, Focus as _, RemoveInstance as y, AddInstance as v, AddItem as M, Click as b,
} from './afb-events.min.js'; import j from '../formula/index.min.js'; import {
  format as E, parseDefaultDate as x, datetimeToNumber as I, parseDateSkeleton as T, numberToDatetime as w, formatDate as D, parseDate as $,
} from './afb-formatters.min.js';

function N(e, t, n, i) { let s; const r = arguments.length; let a = r < 3 ? t : i === null ? i = Object.getOwnPropertyDescriptor(t, n) : i; if (typeof Reflect === 'object' && typeof Reflect.decorate === 'function')a = Reflect.decorate(e, t, n, i); else for (let o = e.length - 1; o >= 0; o--)(s = e[o]) && (a = (r < 3 ? s(a) : r > 3 ? s(t, n, a) : s(t, n)) || a); return r > 3 && a && Object.defineProperty(t, n, a), a; } const O = Object.freeze({
  PATTERN_MISMATCH: 'patternMismatch', TOO_SHORT: 'tooShort', TOO_LONG: 'tooLong', RANGE_OVERFLOW: 'rangeOverflow', RANGE_UNDERFLOW: 'rangeUnderflow', TYPE_MISMATCH: 'typeMismatch', VALUE_MISSING: 'valueMissing', STEP_MISMATCH: 'stepMismatch', FORMAT_MISMATCH: 'formatMismatch', ACCEPT_MISMATCH: 'acceptMismatch', FILE_SIZE_MISMATCH: 'fileSizeMismatch', UNIQUE_ITEMS_MISMATCH: 'uniqueItemsMismatch', MIN_ITEMS_MISMATCH: 'minItemsMismatch', MAX_ITEMS_MISMATCH: 'maxItemsMismatch', EXPRESSION_MISMATCH: 'expressionMismatch', EXCLUSIVE_MAXIMUM_MISMATCH: 'exclusiveMaximumMismatch', EXCLUSIVE_MINIMUM_MISMATCH: 'exclusiveMinimumMismatch',
}); const S = Object.freeze({
  pattern: O.PATTERN_MISMATCH, minLength: O.TOO_SHORT, maxLength: O.TOO_LONG, maximum: O.RANGE_OVERFLOW, minimum: O.RANGE_UNDERFLOW, type: O.TYPE_MISMATCH, required: O.VALUE_MISSING, step: O.STEP_MISMATCH, format: O.FORMAT_MISMATCH, accept: O.ACCEPT_MISMATCH, maxFileSize: O.FILE_SIZE_MISMATCH, uniqueItems: O.UNIQUE_ITEMS_MISMATCH, minItems: O.MIN_ITEMS_MISMATCH, maxItems: O.MAX_ITEMS_MISMATCH, validationExpression: O.EXPRESSION_MISMATCH, exclusiveMinimum: O.EXCLUSIVE_MINIMUM_MISMATCH, exclusiveMaximum: O.EXCLUSIVE_MAXIMUM_MISMATCH,
}); const C = Object.freeze({
  [O.PATTERN_MISMATCH]: 'Please match the format requested.', [O.TOO_SHORT]: 'Please lengthen this text to ${0} characters or more.', [O.TOO_LONG]: 'Please shorten this text to ${0} characters or less.', [O.RANGE_OVERFLOW]: 'Value must be less than or equal to ${0}.', [O.RANGE_UNDERFLOW]: 'Value must be greater than or equal to ${0}.', [O.TYPE_MISMATCH]: 'Please enter a valid value.', [O.VALUE_MISSING]: 'Please fill in this field.', [O.STEP_MISMATCH]: 'Please enter a valid value.', [O.FORMAT_MISMATCH]: 'Specify the value in allowed format : ${0}.', [O.ACCEPT_MISMATCH]: 'The specified file type not supported.', [O.FILE_SIZE_MISMATCH]: 'File too large. Reduce size and try again.', [O.UNIQUE_ITEMS_MISMATCH]: 'All the items must be unique.', [O.MIN_ITEMS_MISMATCH]: 'Specify a number of items equal to or greater than ${0}.', [O.MAX_ITEMS_MISMATCH]: 'Specify a number of items equal to or less than ${0}.', [O.EXPRESSION_MISMATCH]: 'Please enter a valid value.', [O.EXCLUSIVE_MINIMUM_MISMATCH]: 'Value must be greater than ${0}.', [O.EXCLUSIVE_MAXIMUM_MISMATCH]: 'Value must be less than ${0}.',
}); const A = {}; let F; let k; let R; !(function (e) { e.CODE = 'code', e.UI = 'ui'; }(F || (F = {}))); class P {
  fieldName;

  errorMessages;

  constructor(e = '', t = []) { this.errorMessages = t, this.fieldName = e; }
}!(function (e) { e.NEXT_ITEM = 'nextItem', e.PREVIOUS_ITEM = 'previousItem'; }(k || (k = {}))), (function (e) { e.INVISIBLE = 'invisible', e.VISIBLE = 'visible'; }(R || (R = {}))); const V = (e) => new Map(Object.entries(e)); const q = V({ date: 'date-input', 'data-url': 'file-input', binary: 'file-input' }); const U = V({
  number: 'number-input', boolean: 'checkbox', object: 'panel', array: 'panel', file: 'file-input', 'file[]': 'file-input',
}); const z = ['string[]', 'boolean[]', 'number[]', 'array']; const L = (e) => { const t = e.type || 'string'; if ('enum' in e) { return e.enum.length > 2 || z.indexOf(t) > -1 ? 'drop-down' : 'checkbox'; } return t === 'string' || t === 'string[]' ? q.get(e.format) || 'text-input' : U.get(t) || 'text-input'; }; const H = function (e) { return e?.type === 'file' || e?.type === 'file[]' || (e?.type === 'string' || e?.type === 'string[]') && (e?.format === 'binary' || e?.format === 'data-url') || e?.fieldType === 'file-input'; }; function Q(e, t) { if (e === null || typeof e !== 'object') return e; let n; if (Array.isArray(e)) { n = new Array(e.length); for (let i = 0; i < e.length; i++)n[i] = Q(e[i], t); } else { n = {}; for (const i of Object.keys(e))n[i] = Q(e[i], t); } return t && n && n.id && (n.id = t()), n; } const G = (e) => JSON.stringify(e, null, 2); const B = (e) => e.repeatable && (void 0 === e.minOccur && void 0 === e.maxOccur || void 0 !== e.minOccur && void 0 !== e.maxOccur && e.maxOccur !== 0 || void 0 !== e.minOccur && void 0 !== e.maxOccur && e.minOccur !== 0 && e.maxOccur !== 0 || void 0 !== e.minOccur && e.minOccur >= 0 || void 0 !== e.maxOccur && e.maxOccur !== 0) || !1; class X {
  $_name;

  $_value;

  $_type;

  $_fields = [];

  parent;

  constructor(e, t, n = typeof t, i) { this.$_name = e, this.$_value = t, this.$_type = n, this.parent = i; }

  valueOf() { return this.$_value; }

  get $name() { return this.$_name; }

  get disabled() { return !this.$_fields.find(((e) => !1 !== e.enabled)) && this.$_fields.length; }

  get $value() { const e = this.$_fields.find(((e) => { if (H(e)) return e; })); if (e && this.$_fields.every(((e) => ['string', 'string[]'].includes(e.type)))) { const t = e.form._exportDataAttachmentMap; if (t && t[e.id]) { const n = t[e.id]; return Array.isArray(n) ? n.map(((e) => e.data)) : n.data; } } return this.$_value; }

  setValue(e, t, n) { this.$_value = e, this.$_fields.forEach(((e) => { n !== e && (e.value = t); })); }

  get $type() { return this.$_type; }

  $bindToField(e) { this.$_fields.indexOf(e) === -1 && this.$_fields.push(e); }

  $convertToDataValue() { return this; }

  get $isDataGroup() { return !1; }

  $addDataNode(e, t, n = !1) { throw 'add Data Node is called on a data value'; }
} const W = Symbol('NullValue'); const J = new class extends X {
  constructor() { super('', W, 'null'); }

  setValue() {}

  $bindToField() {}

  $length() { return 0; }

  $convertToDataValue() { return this; }

  $addDataNode() {}

  $removeDataNode() {}

  $getDataNode() { return this; }

  $containsDataNode() { return !1; }
}(); class K extends X {
  $_items;

  createEntry(e, t, n) { const i = Array.isArray(t) ? 'array' : typeof t; return typeof t === 'object' && t != null ? new K(e, t, i, n) : new X(e, t, i, n); }

  constructor(e, t, n = typeof t, i) { super(e, t, n, i), this.$_items = t instanceof Array ? t.map(((e, t) => this.createEntry(t, e, this))) : Object.fromEntries(Object.entries(t).map((([e, t]) => [e, this.createEntry(e, t, this)]))); }

  get $value() { return this.$type === 'array' ? Object.values(this.$_items).filter(((e) => void 0 !== e && !e.disabled)).map(((e) => e.$value)) : Object.fromEntries(Object.values(this.$_items).filter(((e) => void 0 !== e && !e.disabled)).map(((e) => [e.$name, e.$value]))); }

  get $length() { return Object.entries(this.$_items).length; }

  $convertToDataValue() { return new X(this.$name, this.$value, this.$type, this.parent); }

  syncDataAndFormModel(e) { this.$_fields.forEach(((t) => { e && e !== t && t.syncDataAndFormModel(this); })); }

  $addDataNode(e, t, n = !1, i = null) { if (t !== J) { if (this.$type === 'array') { const s = e; n ? this.$_items[e] = t : this.$_items.splice(s, 0, t), this.syncDataAndFormModel(i); } else this.$_items[e] = t; t.parent = this; } }

  $removeDataNode(e, t = null) { this.$type === 'array' ? (this.$_items.splice(e, 1), this.syncDataAndFormModel(t)) : this.$_items[e] = void 0; }

  $getDataNode(e) { if (this.$_items.hasOwnProperty(e)) return this.$_items[e]; }

  $containsDataNode(e) { return this.$_items.hasOwnProperty(e) && void 0 !== this.$_items[e]; }

  get $isDataGroup() { return !0; }
} const Z = 'Identifier'; const Y = 'Global'; const ee = 'Repeatable'; const te = 'bracket'; const ne = (e, t) => ({ type: Z, value: e, start: t }); const ie = function (e) { return e >= 'a' && e <= 'z' || e >= 'A' && e <= 'Z' || e >= '0' && e <= '9' || e === '_'; }; const se = (e, t, n) => e === null && t[n] === '$'; const re = (e, t, n) => e === null && t[n] === '#'; const ae = (e, t) => { const n = e[t]; return n === '$' ? e.length > t && ie(e[t + 1]) : n >= 'a' && n <= 'z' || n >= 'A' && n <= 'Z' || n === '_'; }; const oe = (e) => e >= '0' && e <= '9'; class le {
  stream;

  _current;

  _tokens = [];

  _result_tokens = [];

  constructor(e) { this.stream = e, this._current = 0; }

  _consumeGlobal() { return this._current += 1, { type: Y, start: 0, value: '$' }; }

  _consumeRepeatable() { return this._current += 1, { type: ee, start: 0, value: '#' }; }

  _consumeUnquotedIdentifier(e) { const t = this._current; for (this._current += 1; this._current < e.length && ie(e[this._current]);) this._current += 1; return ne(e.slice(t, this._current), t); }

  _consumeQuotedIdentifier(e) { const t = this._current; this._current += 1; const n = e.length; for (;e[this._current] !== '"' && this._current < n;) { let t = this._current; e[t] !== '\\' || e[t + 1] !== '\\' && e[t + 1] !== '"' ? t += 1 : t += 2, this._current = t; } return this._current += 1, ne(JSON.parse(e.slice(t, this._current)), t); }

  _consumeNumber(e) { const t = this._current; this._current += 1; const n = e.length; for (;oe(e[this._current]) && this._current < n;) this._current += 1; const i = e.slice(t, this._current); return { type: 'Number', value: parseInt(i, 10), start: t }; }

  _consumeBracket(e) { const t = this._current; let n; if (this._current += 1, !oe(e[this._current])) throw new Error(`unexpected exception at position ${this._current}. Must be a character`); if (n = this._consumeNumber(e).value, this._current < this.stream.length && e[this._current] !== ']') throw new Error(`unexpected exception at position ${this._current}. Must be a character`); return this._current++, ((e, t) => ({ type: te, value: e, start: t }))(n, t); }

  tokenize() { const e = this.stream; for (;this._current < e.length;) { const t = this._tokens.length ? this._tokens.slice(-1)[0] : null; if (se(t, e, this._current)) { const e = this._consumeGlobal(); this._tokens.push(e), this._result_tokens.push(e); } else if (re(t, e, this._current)) { const e = this._consumeRepeatable(); this._tokens.push(e), this._result_tokens.push(e); } else if (ae(e, this._current)) { const t = this._consumeUnquotedIdentifier(e); this._tokens.push(t), this._result_tokens.push(t); } else if (e[this._current] === '.' && t != null && t.type !== 'DOT') this._tokens.push({ type: 'DOT', value: '.', start: this._current }), this._current += 1; else if (e[this._current] === '[') { const t = this._consumeBracket(e); this._tokens.push(t), this._result_tokens.push(t); } else { if (e[this._current] !== '"') { const e = Math.max(0, this._current - 2); const t = Math.min(this.stream.length, this._current + 2); throw new Error(`Exception at parsing stream ${this.stream.slice(e, t)}`); } { const t = this._consumeQuotedIdentifier(e); this._tokens.push(t), this._result_tokens.push(t); } } } return this._result_tokens; }
} const ue = (e) => new le(e).tokenize(); const de = (e, t, n) => { let i; i = typeof t === 'string' ? ue(t) : t; let s = e; let r = 0; const a = (e, t, n) => (t === null ? n : t.type === te ? new K(e.value, [], 'array') : new K(e.value, {})); for (;r < i.length && s != null;) { const t = i[r]; if (t.type === Y)s = e; else if (t.type === Z) { if (!(s instanceof K && s.$type === 'object')) throw new Error(`Looking for ${t.value} in ${s.$value}`); if (s.$containsDataNode(t.value) && s.$getDataNode(t.value).$value !== null)s = s.$getDataNode(t.value); else if (n) { const e = a(t, r < i.length - 1 ? i[r + 1] : null, n); s.$addDataNode(t.value, e), s = e; } else s = void 0; } else if (t.type === te) { if (!(s instanceof K && s.$type === 'array')) throw new Error(`Looking for index ${t.value} in non array${s.$value}`); { const e = t.value; if (e < s.$length)s = s.$getDataNode(e); else if (n) { const o = a(t, r < i.length - 1 ? i[r + 1] : null, n); s.$addDataNode(e, o), s = o; } else s = void 0; } }r += 1; } return s; }; class he {
  data;

  mediaType = 'application/octet-stream';

  name = 'unknown';

  size = 0;

  constructor(e) { Object.assign(this, e); }

  get type() { return this.mediaType; }

  set type(e) { this.mediaType = e; }

  toJSON() {
    return {
      name: this.name, size: this.size, mediaType: this.mediaType, data: this.data.toString(),
    };
  }

  equals(e) { return this.data === e.data && this.mediaType === e.mediaType && this.name === e.name && this.size === e.size; }
} const ce = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_'.split(''); const pe = /^(\d*\.?\d+)(\\?(?=[KMGT])([KMGT])(?:i?B)?|B?)$/i; const me = (e) => { const t = []; for (let n = 0; n <= e; n++) { let e; e = n === 0 ? Math.floor(Math.random() * (ce.length - 11)) : Math.floor(Math.random() * ce.length), t.push(ce[e]); } return t.join(''); }; const fe = (e, t, n) => { if (t && e.dataRef === null) return n ? Promise.resolve(null) : null; let i = null; if (e.isContainer) return n ? ge(e, t).then(((e) => e)) : _e(e, t); if (H(e.getState())) { i = {}; const t = e.name || ''; const s = e.dataRef != null ? e.dataRef : t.length > 0 ? e.name : void 0; if (e.value instanceof Array) if (e.type === 'string[]') { if (n) return e.serialize().then(((t) => (i[e.id] = t.map(((e) => ({ ...e, dataRef: s }))), i))); i[e.id] = e.value.map(((e) => ({ ...e, dataRef: s }))); } else i[e.id] = e.value.map(((e) => ({ ...e, dataRef: s }))); else if (e.value != null) if (e.type === 'string') { if (n) return e.serialize().then(((t) => (i[e.id] = { ...t[0], dataRef: s }, i))); i[e.id] = { ...e.value, dataRef: s }; } else i[e.id] = { ...e.value, dataRef: s }; } return n ? Promise.resolve(i) : i; }; const ge = async (e, t = !1) => (e.items || []).reduce((async (e, n) => { const i = await e; const s = await fe(n, t, !0); return Object.assign(i, s); }), Promise.resolve({})); const _e = (e, t = !1) => (e.items || []).reduce(((e, n) => { const i = fe(n, t, !1); return Object.assign(e, i); }), {}); const ye = (e) => { let t = 0; if (typeof e === 'string') { const n = pe.exec(e.trim()); n != null && (t = ve(parseFloat(n[1]), (n[2] || 'kb').toUpperCase())); } return t; }; const ve = (e, t) => {
  const n = 1024 ** {
    KB: 1, MB: 2, GB: 3, TB: 4,
  }[t]; return Math.round(e * n);
}; const Me = (e) => /^data:([a-z]+\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/.exec(e.trim()) != null; const be = (e) => { const t = /^data:([a-z]+\/[a-z0-9-+.]+)?(?:;name=([^;]+))?(;base64)?,(.+)$/.exec(e); if (t !== null) { const e = t[1] || ''; const n = t[2] || 'unknown'; if (typeof t[3] === 'string') { const i = atob(t[4]); const s = []; for (let e = 0; e < i.length; e++)s.push(i.charCodeAt(e)); return { name: n, blob: new window.Blob([new Uint8Array(s)], { type: e }) }; } return { name: n, blob: new window.Blob([t[4]], { type: e }) }; } return null; }; const je = (e) => { if (!e || !Object.keys(e).length) return e; if ((':items' in (t = e) || 'cqItems' in t) && (':itemsOrder' in t || 'cqItemsOrder' in t)) { const t = []; const n = e[':itemsOrder'] || e.cqItemsOrder; const i = e[':items'] || e.cqItems; n.forEach(((e) => { t.push(je(i[e])); })), e.items = t; } let t; return e; }; const Ee = /^(\d{4})-(\d{1,2})-(\d{1,2})$/; const xe = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/; const Ie = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; const Te = (e) => { if (e === '' || e == null) return { value: '', valid: !0 }; let t = parseFloat(e); const n = !isNaN(t); return n || (t = e), { value: t, valid: n }; }; const we = (e) => { if (e === '' || e == null) return { value: '', valid: !0 }; let t = parseFloat(e); const n = !isNaN(t) && Math.round(t) === t; return n || (t = e), { value: t, valid: n }; }; const De = (e) => (e == null || e instanceof Array ? e : [e]); const $e = (e) => { const t = typeof e === 'boolean' || e === 'true' || e === 'false'; return { valid: t, value: typeof e === 'boolean' ? e : t ? e === 'true' : e }; }; const Ne = (e) => {
  const t = ((e) => {
    if (e !== null) {
      let t = null; if (e instanceof he)t = e; else if (typeof File !== 'undefined' && e instanceof File) {
        t = {
          name: e.name, mediaType: e.type, size: e.size, data: e,
        };
      } else if (typeof e === 'string' && Me(e)) {
        const n = be(e); if (n !== null) {
          const { blob: e, name: i } = n; t = {
            name: i, mediaType: e.type, size: e.size, data: e,
          };
        }
      } else {
        let n = e; try { n = JSON.parse(e), t = n, t.mediaType || (t.mediaType = t.type); } catch (e) {} if (typeof n?.data === 'string' && Me(n?.data)) {
          const e = be(n?.data); if (e !== null) {
            const i = e.blob; t = {
              name: n?.name, mediaType: n?.type || n?.mediaType, size: i.size, data: i,
            };
          }
        } else {
          typeof n === 'string' ? t = {
            name: n.split('/').pop(), mediaType: 'application/octet-stream', size: 0, data: n,
          } : typeof n === 'object' && (t = {
            name: n?.name, mediaType: n?.type || n?.mediaType, size: n?.size, data: n?.data,
          });
        }
      } return t !== null && t.data != null ? new he(t) : null;
    } return null;
  })(e); const n = t !== null; return { value: n ? t : e, valid: n };
}; const Oe = (e, t) => { const n = De(e); return n == null ? [[], [n]] : n.reduce(((e, n) => { if (e[1].length == 0) { const i = t(n); e[i.valid ? 0 : 1].push(i.value); } return e; }), [[], []]); }; const Se = {
  date: ['minimum', 'maximum', 'exclusiveMinimum', 'exclusiveMaximum', 'format'], string: ['minLength', 'maxLength', 'pattern'], number: ['minimum', 'maximum', 'exclusiveMinimum', 'exclusiveMaximum'], array: ['minItems', 'maxItems', 'uniqueItems'], file: ['accept', 'maxFileSize'], email: ['minLength', 'maxLength', 'format', 'pattern'],
}; const Ce = ['type', 'format', 'minimum', 'maximum', 'exclusiveMinimum', 'exclusiveMaximum', 'minItems', 'maxItems', 'uniqueItems', 'minLength', 'maxLength', 'pattern', 'required', 'enum', 'accept', 'maxFileSize']; const Ae = {
  type: (e, t) => { let n = t; if (t == null) return { valid: !0, value: t }; let i; let s = !0; switch (e) { case 'string': s = !0, n = t.toString(); break; case 'string[]': n = De(t); break; case 'number': i = Te(t), n = i.value, s = i.valid; break; case 'boolean': i = $e(t), s = i.valid, n = i.value; break; case 'integer': i = we(t), s = i.valid, n = i.value; break; case 'integer[]': i = Oe(t, we), s = i[1].length === 0, n = s ? i[0] : t; break; case 'file': i = Ne(t instanceof Array ? t[0] : t), s = i.valid, n = i.value; break; case 'file[]': i = Oe(t, Ne), s = i[1].length === 0, n = s ? i[0] : t; break; case 'number[]': i = Oe(t, Te), s = i[1].length === 0, n = s ? i[0] : t; break; case 'boolean[]': i = Oe(t, $e), s = i[1].length === 0, n = s ? i[0] : t; } return { valid: s, value: n }; }, format: (e, t) => { let n = !0; const i = t; if (t === null) return { value: i, valid: n }; let s; switch (e) { case 'date': if (s = Ee.exec((t || '').trim()), s != null) { const [e, t, i, r] = s; const [a, o] = [+i, +r]; const l = ((e) => e % 400 == 0 || e % 4 == 0 && e % 100 != 0)(+t); n = a >= 1 && a <= 12 && o >= 1 && o <= ((e, t) => (e && t == 2 ? 29 : Ie[t - 1]))(l, a); } else n = !1; break; case 'email': n = new RegExp(xe).test((t || '').trim()); break; case 'data-url': n = !0; } return { valid: n, value: i }; }, minimum: (e, t) => ({ valid: t >= e, value: t }), maximum: (e, t) => ({ valid: t <= e, value: t }), exclusiveMinimum: (e, t) => ({ valid: t > e, value: t }), exclusiveMaximum: (e, t) => ({ valid: t < e, value: t }), minItems: (e, t) => ({ valid: t instanceof Array && t.length >= e, value: t }), maxItems: (e, t) => ({ valid: t instanceof Array && t.length <= e, value: t }), uniqueItems: (e, t) => ({ valid: !e || t instanceof Array && t.length === new Set(t).size, value: t }), minLength: (e, t) => ({ ...Ae.minimum(e, typeof t === 'string' ? t.length : 0), value: t }), maxLength: (e, t) => ({ ...Ae.maximum(e, typeof t === 'string' ? t.length : 0), value: t }), pattern: (e, t) => { let n; return n = typeof e === 'string' ? new RegExp(e) : e, { valid: n.test(t), value: t }; }, required: (e, t) => ({ valid: !e || t != null && t !== '', value: t }), enum: (e, t) => ({ valid: e.indexOf(t) > -1, value: t }), accept: (e, t) => { if (!e || e.length === 0 || t == null) return { valid: !0, value: t }; return { valid: !(t instanceof Array ? t : [t]).some(((t) => { return n = t.type, i = e, !(!n || i.some(((e) => { const t = e.trim(); const i = t.split('/')[0]; const s = t.split('.')[1]; return t.includes('*') && n.startsWith(i) || t.includes('.') && n.endsWith(s) || t === n; }))); let n; let i; })), value: t }; }, maxFileSize: (e, t) => { const n = typeof e === 'string' ? ye(e) : e; return { valid: !(t instanceof he) || t.size <= n, value: t }; },
}; const Fe = ['value', 'label', 'description', 'visible', 'enabled', 'valid', 'errorMessage', 'readOnly', 'enum', 'enumNames', 'required', 'properties', 'exclusiveMinimum', 'exclusiveMaximum', 'maximum', 'maxItems', 'minimum', 'minItems', 'checked']; const ke = [...Fe, 'index', 'activeChild']; const Re = ['plain-text', 'image']; class Pe {
  _action;

  _target;

  _currentTarget;

  constructor(e, t) { this._action = e, e.target ? (this._currentTarget = t, this._target = e.target) : (this._target = t, this._currentTarget = t); }

  get type() { return this._action.type; }

  get payload() { return this._action.payload; }

  get metadata() { return this._action.metadata; }

  get target() { return this._target; }

  get currentTarget() { return this._currentTarget; }

  get isCustomEvent() { return this._action.isCustomEvent; }

  get originalAction() { return this._action.originalAction; }

  toString() { return this._action.toString(); }
} const Ve = Symbol('target'); const qe = Symbol('qualifiedName'); const Ue = (e) => (...t) => (n, i, s) => { const r = s.get; r != null && (s.get = function () { if (t.indexOf(this.fieldType) > -1 === e) return r.call(this); }); const a = s.set; a != null && (s.set = function (n) { t.indexOf(this.fieldType) > -1 === e && a.call(this, n); }); }; const ze = Ue(!0); const Le = Ue(!1); class He {
  _options;

  _ruleNode;

  _lang = '';

  _callbacks = {};

  _dependents = [];

  _jsonModel;

  _tokens = [];

  _eventSource = F.CODE;

  _fragment = '$form';

  get isContainer() { return !1; }

  constructor(e, t) { this._options = t, this[qe] = null, this._jsonModel = { ...e, id: 'id' in e ? e.id : this.form.getUniqueId() }, this.parent?.isFragment ? this._fragment = this.parent.qualifiedName : this.parent?.fragment && (this._fragment = this.parent.fragment); }

  get fragment() { return this._fragment; }

  setupRuleNode() { const e = this; this._ruleNode = new Proxy(this.ruleNodeReference(), { get: (t, n) => e.getFromRule(t, n) }); }

  ruleNodeReference() { return this; }

  getRuleNode() { return this._ruleNode; }

  getFromRule(e, t) { if (t === Symbol.toPrimitive || t === 'valueOf' && !e.hasOwnProperty('valueOf')) return this.valueOf; if (t === Ve) return this; if (typeof t === 'string') if (t.startsWith('$')) { if (typeof this[t = t.substr(1)] !== 'function') { const e = this[t]; return e instanceof He ? e.getRuleNode() : e instanceof Array ? e.map(((e) => (e instanceof He ? e.getRuleNode() : e))) : e; } } else { if (e.hasOwnProperty(t)) return e[t]; if (typeof e[t] === 'function') return e[t]; } }

  get id() { return this._jsonModel.id; }

  get index() { return this.parent ? this.parent.indexOf(this) : 0; }

  get parent() { return this._options.parent; }

  get type() { return this._jsonModel.type; }

  get repeatable() { return this.parent?.hasDynamicItems(); }

  get fieldType() { return this._jsonModel.fieldType || 'text-input'; }

  get ':type'() { return this._jsonModel[':type'] || this.fieldType; }

  get name() { return this._jsonModel.name; }

  get screenReaderText() { return this._jsonModel.screenReaderText; }

  get description() { return this._jsonModel.description; }

  set description(e) { this._setProperty('description', e); }

  get dataRef() { return this._jsonModel.dataRef; }

  get visible() { return void 0 !== this.parent?.visible ? !!this.parent?.visible && this._jsonModel.visible : this._jsonModel.visible; }

  set visible(t) { if (t !== this._jsonModel.visible) { const n = e('visible', t, this._jsonModel.visible); this._jsonModel.visible = t, this.notifyDependents(n); } }

  get form() { return this._options.form; }

  get ruleEngine() { return this.form.ruleEngine; }

  get label() { return this._jsonModel.label; }

  set label(t) { if (t !== this._jsonModel.label) { const n = e('label', t, this._jsonModel.label); this._jsonModel = { ...this._jsonModel, label: t }, this.notifyDependents(n); } }

  get uniqueItems() { return this._jsonModel.uniqueItems; }

  isTransparent() { const e = this.parent?._jsonModel?.type === 'array'; return !this._jsonModel.name && !e; }

  getDependents() { return this._dependents.map(((e) => e.node.id)); }

  getState(e = !1) {
    return {
      ...this._jsonModel,
      properties: this.properties,
      index: this.index,
      parent: void 0,
      qualifiedName: this.qualifiedName,
      ...!0 === this.repeatable ? { repeatable: !0, minOccur: this.parent.minItems, maxOccur: this.parent.maxItems } : {},
      ':type': this[':type'],
      ...e ? {
        _dependents: this._dependents.length ? this.getDependents() : void 0, allowedComponents: void 0, columnClassNames: void 0, columnCount: void 0, gridClassNames: void 0,
      } : {},
    };
  }

  subscribe(e, t = 'change') { return this._callbacks[t] = this._callbacks[t] || [], this._callbacks[t].push(e), { unsubscribe: () => { this._callbacks[t] = this._callbacks[t].filter(((t) => t !== e)); } }; }

  _addDependent(e) { if (void 0 === this._dependents.find((({ node: t }) => t === e))) { const n = this.subscribe(((n) => { const i = n.payload.changes; const s = [...ke, 'items']; i.findIndex(((e) => s.indexOf(e.propertyName) > -1)) > -1 && (this.form.changeEventBehaviour === 'deps' ? e.dispatch(n) : e.dispatch(new t())); })); this._dependents.push({ node: e, subscription: n }); } }

  removeDependent(e) { const t = this._dependents.findIndex((({ node: t }) => t === e)); t > -1 && (this._dependents[t].subscription.unsubscribe(), this._dependents.splice(t, 1)); }

  queueEvent(e) { const t = new Pe(e, this); this.form.getEventQueue().queue(this, t, ['valid', 'invalid'].indexOf(t.type) > -1); }

  dispatch(e) { this.queueEvent(e), this.form.getEventQueue().runPendingQueue(); }

  notifyDependents(e) { const t = this._jsonModel._dependents; t && (t.forEach(((e) => { const t = this.form.getElement(e); t && this._addDependent(t); })), this._jsonModel._dependents = void 0); (this._callbacks[e.type] || []).forEach(((t) => { t(new Pe(e, this)); })); }

  isEmpty(e = this._jsonModel.value) { return e == null || e === ''; }

  _setProperty(t, n, i = !0, s = (e) => {}) { const r = this._jsonModel[t]; let a = !1; if (a = n !== null && r !== null && typeof n === 'object' && typeof r === 'object' ? JSON.stringify(n) === JSON.stringify(r) : r === n, !a) { this._jsonModel[t] = n; const a = e(t, n, r); return i && this.notifyDependents(a), s.call(this, a), Ce.includes(t) && this.validate(), a.payload.changes; } return []; }

  bindToDataModel(e) { if (this.fieldType === 'form' || this.id === '$form') return void (this._data = e); const t = this._jsonModel.dataRef; let n; let i = e; let s = ''; if (t === null)n = J; else if (void 0 === t || this.repeatable) { if (e !== J && Re.indexOf(this.fieldType) === -1) { i = e; const t = this._jsonModel.name || ''; const r = e.$type === 'array' ? this.index : t; if (s = r, r !== '') { const t = this.defaultDataModel(r); void 0 !== t && (n = e.$getDataNode(r), void 0 === n && (n = t, e.$addDataNode(r, n))); } else n = void 0; } } else { this._tokens.length === 0 && (this._tokens = ue(t)); let r = e; if (this._tokens[0].type === Y)r = this.form.getDataNode(); else if (this._tokens[0].type === ee) { let e = this.parent; for (;!e.repeatable && e !== this.form;)e = e.parent; r = e.getDataNode(); } if (void 0 !== r) { const e = this._tokens[this._tokens.length - 1].value; const t = this.defaultDataModel(e); n = de(r, this._tokens, t), i = de(r, this._tokens.slice(0, -1)), s = e; } } return n && (this.isContainer || i === J || n === J || (n = n?.$convertToDataValue(), i.$addDataNode(s, n, !0)), n?.$bindToField(this), this._data = n), this._data; }

  _data;

  getDataNode() { return this._data; }

  get lang() { return this._jsonModel.lang && (this._lang = this._jsonModel.lang), this._lang || (this.parent ? this._lang = this.parent.lang : this._lang = Intl.DateTimeFormat().resolvedOptions().locale), this._lang; }

  get properties() { return this._jsonModel.properties || {}; }

  set properties(e) { this._setProperty('properties', { ...e }); }

  getNonTransparentParent() { let e = this.parent; for (;e != null && e.isTransparent();)e = e.parent; return e; }

  _initialize(e) { if (void 0 === this._data) { let e; let t = this.parent; do { e = t.getDataNode(), t = t.parent; } while (void 0 === e); this.bindToDataModel(e); } }

  _applyUpdates(e, t) { return e.reduce(((e, n) => { const i = t[n]; const s = this._setProperty(n, i, !1); return s.length > 0 && (e[n] = s[0]), e; }), {}); }

  get qualifiedName() { if (this.isTransparent()) return null; if (this[qe] !== null) return this[qe]; const e = this.getNonTransparentParent(); return e && e.type === 'array' ? this[qe] = `${e.qualifiedName}[${this.index}]` : this[qe] = `${e.qualifiedName}.${this.name}`, this[qe]; }

  focus() { this.parent && (this.parent.activeChild = this); }

  _getDefaults() { return {}; }

  _applyDefaultsInModel() { Object.entries(this._getDefaults()).map((([e, t]) => { void 0 === this._jsonModel[e] && void 0 !== t ? this._jsonModel[e] = t : typeof t !== 'object' || t === null || Array.isArray(t) || Object.keys(t).forEach(((n) => { void 0 === this._jsonModel[e][n] && (this._jsonModel[e][n] = t[n]); })); })); }
}N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], He.prototype, 'index', null), N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], He.prototype, 'description', null), N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], He.prototype, 'visible', null), N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], He.prototype, 'label', null), N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], He.prototype, 'properties', null); class Qe extends He {
  _events = {};

  _rules = {};

  getRules() { return typeof this._jsonModel.rules !== 'object' ? {} : this._jsonModel.rules; }

  getCompiledRule(e, t) { if (!(e in this._rules)) { const n = t || this.getRules()[e]; if (!(typeof n === 'string' && n.length > 0)) throw new Error(`only expression strings are supported. ${typeof n} types are not supported`); try { let t = n; this.fragment !== '$form' && (t = n.replaceAll('$form', this.fragment)), this._rules[e] = this.ruleEngine.compileRule(t, this.lang); } catch (t) { this.form.logger.error(`Unable to compile rule \`"${e}" : "${n}"\` Exception : ${t}`); } } return this._rules[e]; }

  getCompiledEvent(e) { if (!(e in this._events)) { let t = this._jsonModel.events?.[e]; typeof t === 'string' && t.length > 0 && (t = [t]), void 0 !== t && t.length > 0 && (this._events[e] = t.map(((n) => { try { let e = n; return this.fragment !== '$form' && (e = n.replaceAll('$form', this.fragment)), this.ruleEngine.compileRule(e, this.lang); } catch (n) { this.form.logger.error(`Unable to compile expression \`"${e}" : "${t}"\` Exception : ${n}`); } return null; })).filter(((e) => e !== null))); } return this._events[e] || []; }

  applyUpdates(e) { typeof e === 'object' ? e !== null && Object.entries(e).forEach((([e, t]) => { if (e in Fe || e in this && typeof this[e] !== 'function') try { this[e] = t; } catch (e) { console.error(e); } })) : void 0 !== e && (this.value = e); }

  executeAllRules(e) { const t = Object.entries(this.getRules()); if (t.length > 0) { const n = this.getExpressionScope(); t.forEach((([t, i]) => { const s = this.getCompiledRule(t, i); if (s) { const r = this.ruleEngine.execute(s, n, e, !0, i); if (Fe.indexOf(t) > -1) { this.isEmpty() && this.isEmpty(r) && t === 'value' || (this[t] = r); } else this.form.logger.warn(`${t} is not a valid editable property.`); } })); } }

  getExpressionScope() { const e = this.getNonTransparentParent(); const t = { self: this.getRuleNode(), siblings: e?.ruleNodeReference() || {} }; const n = new Proxy(t, { get: (e, t) => { if (t === Symbol.toStringTag) return 'Object'; if (typeof t === 'string' && t.startsWith('$')) { const n = e.self[t]; return n instanceof He ? n.getRuleNode() : n instanceof Array ? n.map(((e) => (e instanceof He ? e.getRuleNode() : e))) : n; } return t in e.siblings ? e.siblings[t] : e.self[t]; }, has: (e, t) => { const n = e.self[t]; const i = e.siblings[t]; return void 0 !== n || void 0 !== i; } }); return n; }

  executeEvent(e, t, n) { let i; t && (i = this.ruleEngine.execute(t, this.getExpressionScope(), e, !1, n), i instanceof Promise && this.form.addPromises(i)), void 0 !== i && i != null && this.applyUpdates(i); }

  executeRule(e, t) { void 0 === e.payload.ruleName && this.executeAllRules(t); }

  executeExpression(e) {
    const t = {
      form: this.form, $form: this.form.getRuleNode(), $field: this.getRuleNode(), field: this,
    }; const n = this.ruleEngine.compileRule(e, this.lang); return this.ruleEngine.execute(n, this.getExpressionScope(), t, !1, e);
  }

  change(e, t) { this.form.changeEventBehaviour === 'deps' && this.executeAllRules(t); }

  executeAction(e) {
    const t = {
      form: this.form, $form: this.form.getRuleNode(), $field: this.getRuleNode(), field: this, $event: { type: e.type, payload: e.payload, target: this.getRuleNode() },
    }; const n = e.isCustomEvent ? `custom:${e.type}` : e.type; const i = e.isCustomEvent ? `custom_${e.type}` : e.type; const s = this.getCompiledEvent(n); const r = this._jsonModel.events?.[n]; i in this && typeof this[i] === 'function' && this[i](e, t), s.forEach(((e, n) => { let i = ''; Array.isArray(r) ? i = r[n] : typeof r === 'string' && (i = r), this.executeEvent(t, e, i); })), e.target === this && this.notifyDependents(e);
  }
} const Ge = ['readOnly', 'enabled']; class Be extends Qe {
  _children = [];

  _childrenReference;

  _itemTemplate = null;

  fieldFactory;

  _isFragment = !1;

  _insideFragment = !1;

  constructor(e, t) { super(e, { form: t.form, parent: t.parent, mode: t.mode }), this._isFragment = !0 === this._jsonModel?.properties?.['fd:fragment'], this.fieldFactory = t.fieldFactory; }

  _getDefaults() { return { ...super._getDefaults(), enabled: !0, readOnly: !1 }; }

  ruleNodeReference() { return this._childrenReference; }

  get items() { return this._children; }

  get maxItems() { return this._jsonModel.maxItems; }

  set maxItems(t) { this._jsonModel.maxItems = t; const n = this._jsonModel.minItems || 1; const i = this._children.length; const s = Math.min(i - t, i - n); if (s > 0) { for (let e = 0; e < s; e++) this.getDataNode().$removeDataNode(t + e), this._childrenReference.pop(); const n = this._children.splice(t, s); this.notifyDependents(e('items', n, null)); } }

  get minItems() { return this._jsonModel.minItems; }

  set minItems(t) { this._jsonModel.minItems = t; const n = this._children.length - t; const i = Math.abs(n); if (n < 0) { const t = []; for (let e = 0; e < i; e++)t.push(this._addChild(this._itemTemplate, null, !0)); this.notifyDependents(e('items', t, null)); } }

  hasDynamicItems() { return this._itemTemplate != null; }

  get isContainer() { return !0; }

  _activeChild = null;

  isSiteContainer(e) { return (':items' in e || 'cqItems' in e) && !('fieldType' in e); }

  isAFormField(e) { return 'fieldType' in e || 'id' in e || 'name' in e || 'dataRef' in e || 'type' in e; }

  _getFormAndSitesState(e = !1, t = !1) { return this._jsonModel.items ? this._jsonModel.items.map(((n) => { if (this.isSiteContainer(n)) { const e = { ...n?.id ? { id: this.form.getUniqueId() } : {} }; return { ...n, ...e, ':items': this.walkSiteContainerItems(n) }; } return this.isAFormField(n) ? { ...this.form.getElement(n?.id).getState(e, t) } : n; })) : []; }

  getItemsState(e = !1, t = !1) { return this._jsonModel.type === 'array' || B(this._jsonModel) || e ? e ? this._getFormAndSitesState(e, t) : this._children.map(((e) => ({ ...e.getState(!0, t) }))) : this._getFormAndSitesState(e, t); }

  getState(e = !1, t = !1) {
    return {
      ...super.getState(t), ...t ? { ':items': void 0, ':itemsOrder': void 0 } : {}, items: this.getItemsState(e, t), enabled: this.enabled, readOnly: this.readOnly,
    };
  }

  _createChild(e, t) { return this.fieldFactory.createField(e, t); }

  walkSiteContainerItems(e) { return Object.fromEntries(Object.entries(e[':items']).map((([e, t]) => { if (this.isAFormField(t)) return [e, this.form.getElement(t?.id).getState()]; if (this.isSiteContainer(t)) return this.walkSiteContainerItems(t); if (typeof t === 'object') { const n = { ...t?.id ? { id: this.form.getUniqueId() } : {} }; return [e, { ...t, ...n }]; } return [e, t]; }))); }

  _addChildToRuleNode(e, t) { const n = this; const { parent: i = this } = t; const s = i.type == 'array' ? `${i._children.length}` : e.name || ''; s.length > 0 && Object.defineProperty(i._childrenReference, s, { get: () => (e.isContainer && e.hasDynamicItems() && n.ruleEngine.trackDependency(e), n.hasDynamicItems() ? (n.ruleEngine.trackDependency(n), void 0 !== this._children[s] ? this._children[s].getRuleNode() : void 0) : e.getRuleNode()), configurable: !0, enumerable: !0 }); }

  _addChild(e, t, n = !1, i = 'create') { let s = this; for (;s != null && s.isTransparent();)s = s.parent; (typeof t !== 'number' || t > s._children.length) && (t = this._children.length); const r = this.form; const a = { index: t, ...Q(e, n ? () => r.getUniqueId() : void 0) }; const o = this._createChild(a, { parent: this, form: this.form, mode: i }); return e.id = o.id, this.form.fieldAdded(o), this._addChildToRuleNode(o, { parent: s }), t === this._children.length ? this._children.push(o) : this._children.splice(t, 0, o), o; }

  indexOf(e) { return this._children.indexOf(e); }

  defaultDataModel(e) { const t = this._jsonModel.type || void 0; if (void 0 !== t) { return new K(e, t === 'array' ? [] : {}, t); } }

  _canHaveRepeatingChildren(e = 'create') { const t = this._jsonModel.items; return this._jsonModel.type == 'array' && this.getDataNode() != null && (t.length === 1 || t.length > 0 && t[0].repeatable == 1 && e === 'restore'); }

  get isFragment() { return this._isFragment || this._jsonModel?.properties?.['fd:fragment']; }

  _initialize(e) { super._initialize(e); const t = this._jsonModel.items || []; if (this._childrenReference = this._jsonModel.type == 'array' ? [] : {}, this._canHaveRepeatingChildren(e)) { this._itemTemplate = Q(t[0]), e === 'restore' && (this._itemTemplate.repeatable = void 0), typeof this._jsonModel.minItems !== 'number' && (this._jsonModel.minItems = 0), typeof this._jsonModel.maxItems !== 'number' && (this._jsonModel.maxItems = -1), typeof this._jsonModel.initialItems !== 'number' && (this._jsonModel.initialItems = Math.max(1, this._jsonModel.minItems)); const n = e === 'restore' ? this._jsonModel.items.length : this._jsonModel.initialItems; for (let i = 0; i < n; i++) { let n; if (e === 'restore') { let s = this._itemTemplate; i < this._jsonModel.items.length && (s = Q(t[i]), s.repeatable = void 0), n = this._addChild(s, void 0, i > this._jsonModel.items.length - 1, e); } else n = this._addChild(this._itemTemplate, void 0, i > this._jsonModel.items.length - 1); e === 'create' && (t[0].id = n.id), n._initialize(e); } } else t.length > 0 ? (t.forEach(((t) => { if (this.isSiteContainer(t)) this._initializeSiteContainer(t); else if (this.isAFormField(t)) { this._addChild(t, void 0, !1, e)._initialize(e); } else this.form.logger.warn(`A container item was not initialized. ${t}`); })), this._jsonModel.minItems = this._children.length, this._jsonModel.maxItems = this._children.length, this._jsonModel.initialItems = this._children.length) : this.form.logger.warn('A container exists with no items.'); this.setupRuleNode(); }

  _initializeSiteContainer(e) { Object.entries(e[':items']).forEach((([e, t]) => { if (this.isAFormField(t)) { this._addChild(t)._initialize(); } else if (this.isSiteContainer(t)) return this._initializeSiteContainer(t); })); }

  addItem(i) { if ((i.type === 'addItem' || i.type == 'addInstance') && this._itemTemplate != null && (this._jsonModel.maxItems === -1 || this._children.length < this._jsonModel.maxItems)) { const s = this.getDataNode(); let r = i.payload; const a = this._addChild(this._itemTemplate, i.payload, !0); (typeof r !== 'number' || r > this._children.length) && (r = this._children.length); const o = a.defaultDataModel(r); o && s.$addDataNode(r, o, !1, this), a._initialize('create'), this.notifyDependents(e('items', a.getState(), null)), a.dispatch(new n()), a.dispatch(new t()); for (let e = r + 1; e < this._children.length; e++) this._children[e].dispatch(new t()); } }

  removeItem(n) { if ((n.type === 'removeItem' || n.type == 'removeInstance') && this._itemTemplate != null) { if (this._children.length == 0) return; let i = n.payload; typeof i !== 'number' && (i = this._children.length - 1); const s = this._children[i].getState(); if (this._children.length > this._jsonModel.minItems) { this._childrenReference.pop(), this._children.splice(i, 1), this.getDataNode().$removeDataNode(i, this); for (let e = i; e < this._children.length; e++) this._children[e].dispatch(new t()); this.notifyDependents(e('items', null, s)); } } }

  queueEvent(e) { super.queueEvent(e), e.metadata?.dispatch && this.items.forEach(((t) => { t.queueEvent(e); })); }

  reset() { if ((this.type === 'array' || B(this._jsonModel)) && this.items.length > this._jsonModel.initialItems) { const e = this.items.length - this._jsonModel.initialItems; for (let t = 0; t < e; t++) this.dispatch(new i()); } this.items.forEach(((e) => { e.reset(); })); }

  validate() { return this.items.flatMap(((e) => e.validate())).filter(((e) => e.fieldName !== '')); }

  dispatch(e) { super.dispatch(e); }

  importData(i) { if (void 0 !== this._data && this.type === 'array' && Array.isArray(i)) { const s = new K(this._data.$name, i, this._data.$type, this._data.parent); try { this._data.parent?.$addDataNode(s.$name, s, !0); } catch (e) { return void this.form.logger.error(`unable to setItems for ${this.qualifiedName} : ${e}`); } this._data = s; const r = this.syncDataAndFormModel(s); const a = this.items.length; r.added.forEach(((t) => { this.notifyDependents(e('items', t.getState(), null)), t.dispatch(new n()); })); for (let e = 0; e < a; e += 1) this._children[e].dispatch(new t()); r.removed.forEach(((t) => { this.notifyDependents(e('items', null, t.getState())); })); } }

  syncDataAndFormModel(e) { const t = { added: [], removed: [] }; if (e?.$type === 'array' && this._itemTemplate != null) { const n = e?.$value.length; const i = this._children.length; const s = this._jsonModel.maxItems === -1 ? n : this._jsonModel.maxItems; const r = this._jsonModel.minItems; let a = Math.min(n - i, s - i); const o = Math.min(i - n, i - r); for (;a > 0;) { a--; const e = this._addChild(this._itemTemplate, this.items.length, !0); e._initialize('create'), t.added.push(e); } if (o > 0) { for (let e = 0; e < o; e++) this._childrenReference.pop(), this._children.pop(); t.removed.push(...this._children); } } return this._children.forEach(((t) => { let n = t.bindToDataModel(e); t.isContainer && !n && (n = e), t.syncDataAndFormModel(n); })), t; }

  get activeChild() { return this._activeChild; }

  set activeChild(t) { if (t !== this._activeChild) { let n = this._activeChild; for (;n instanceof Be;) { const e = n.activeChild; n.activeChild = null, n = e; } const i = e('activeChild', t, this._activeChild); this._activeChild = t, this.parent && t !== null && (this.parent.activeChild = this), this._jsonModel.activeChild = t?.id, this.notifyDependents(i); } }

  get enabled() { const e = this.parent?.enabled; return void 0 !== e ? !!e && this._jsonModel.enabled : this._jsonModel.enabled; }

  set enabled(e) { this._setProperty('enabled', e, !0, this.notifyChildren); }

  get readOnly() { return void 0 !== this.parent?.readOnly && !!this.parent.readOnly || this._jsonModel.readOnly; }

  set readOnly(e) { this._setProperty('readOnly', e, !0, this.notifyChildren); }

  notifyChildren(t) { if (void 0 !== t.payload && void 0 !== t.payload.changes) for (const n of t.payload.changes) void 0 !== n.propertyName && Ge.includes(n.propertyName) && this.items.forEach(((i) => { n.currentValue !== i.getState()[n.propertyName] && (i._jsonModel[n.propertyName] = n.currentValue, this.notifyDependents.call(i, e(n.propertyName, i.getState()[n.propertyName], null))), i.fieldType === 'panel' && this.notifyChildren.call(i, t); })); }
}N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], Be.prototype, 'maxItems', null), N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], Be.prototype, 'minItems', null), N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], Be.prototype, 'activeChild', null); class Xe {
  _jsonModel;

  constructor(e) { this._jsonModel = { ...e }; }

  getP(e, t) { return ((e, t, n) => { if (t in e) return e[t]; if (!t.startsWith(':')) { const n = `:${t}`; if (n in e) return e[n]; } return n; })(this._jsonModel, e, t); }

  get isContainer() { return !1; }
} class We extends Xe {
  get version() { return this.getP('version', ''); }

  get grammar() { return this.getP('grammar', ''); }
} class Je {
  lang;

  captchaInfo;

  constructor(e = {}) { this.lang = e.lang || 'en', this.captchaInfo = e.captchaInfo || {}, Object.keys(e).forEach(((t) => { t !== 'lang' && t !== 'captchaInfo' && (this[t] = e[t]); })); }
} const Ke = {
  off: 0, debug: 1, info: 2, warn: 3, error: 4,
}; class Ze {
  debug(e) { this.log(e, 'debug'); }

  info(e) { this.log(e, 'info'); }

  warn(e) { this.log(e, 'warn'); }

  error(e) { this.log(e, 'error'); }

  log(e, t) { this.logLevel !== 0 && this.logLevel <= Ke[t] && console[t](e); }

  logLevel;

  constructor(e = 'off') { this.logLevel = Ke[e]; }
} class Ye {
  _node;

  _event;

  constructor(e, t) { this._node = e, this._event = t; }

  get node() { return this._node; }

  get event() { return this._event; }

  isEqual(e) { return e != null && this._node == e._node && this._event.type == e._event.type; }

  toString() { return `${this._node.id}__${this.event.type}`; }

  valueOf() { return this.toString(); }
} class et {
  logger;

  static MAX_EVENT_CYCLE_COUNT = 10;

  _runningEventCount;

  _isProcessing = !1;

  _pendingEvents = [];

  constructor(e = new Ze('off')) { this.logger = e, this._runningEventCount = {}; }

  get length() { return this._pendingEvents.length; }

  get isProcessing() { return this._isProcessing; }

  isQueued(e, t) { const n = new Ye(e, t); return void 0 !== this._pendingEvents.find(((e) => n.isEqual(e))); }

  queue(e, t, n = !1) { e && t && (t instanceof Array || (t = [t]), t.forEach(((t) => { const i = new Ye(e, t); const s = this._runningEventCount[i.valueOf()] || 0; if (s < et.MAX_EVENT_CYCLE_COUNT) { if (this.logger.info(`Queued event : ${t.type} node: ${e.id} - ${e.name}`), n) { const e = this._isProcessing ? 1 : 0; this._pendingEvents.splice(e, 0, i); } else this._pendingEvents.push(i); this._runningEventCount[i.valueOf()] = s + 1; } else this.logger.info(`Skipped queueing event : ${t.type} node: ${e.id} - ${e.name} with count=${s}`); }))); }

  empty() { this._pendingEvents = []; }

  runPendingQueue() { if (!this._isProcessing) { for (this._isProcessing = !0; this._pendingEvents.length > 0;) { const e = this._pendingEvents[0]; this.logger.info(`Dequeued event : ${e.event.type} node: ${e.node.id} - ${e.node.name}`), e.node.executeAction(e.event), this._pendingEvents.shift(); } this._runningEventCount = {}, this._isProcessing = !1; } }
} const tt = (e, t = null, n = {}) => { const i = { ...nt, ...n }; const s = i.method === 'GET' && t ? it(e, t) : e; return i.method !== 'GET' && (i.body = t), fetch(s, { ...i }).then((async (t) => { let n; t.ok || console.error(`Error while fetching response from ${e} : ${t.statusText}`), n = t?.headers?.get('Content-Type')?.includes('application/json') ? await t.json() : await t.text(); const i = {}; return t?.headers?.forEach(((e, t) => { i[t] = e; })), { status: t.status, body: n, headers: i }; })); }; const nt = { method: 'GET' }; const it = (e, t) => { if (!t) return e; let n = {}; try { n = JSON.parse(t); } catch (e) { console.log('Query params invalid'); } const i = []; return Object.keys(n).forEach(((e) => { Array.isArray(n[e]) ? i.push(`${encodeURIComponent(e)}=${encodeURIComponent(JSON.stringify(n[e]))}`) : i.push(`${encodeURIComponent(e)}=${encodeURIComponent(n[e])}`); })), i.length ? e.includes('?') ? `${e}&${i.join('&')}` : `${e}?${i.join('&')}` : e; }; const st = (e) => { const t = e; return t.length > 0 && t.startsWith('custom:') ? t.substring(7) : t; }; const rt = async (e, t, n, i, s, r, a) => { const o = t; const l = { method: n }; let u; let m = {}; try { i instanceof Promise && (i = await i); } catch (r) { throw console.error('Error resolving payload Promise:', r), r; } if (i.body && i.headers && (m = { ...i }, a = { ...i.headers }, u = i = i.body), i && i instanceof he && i.data instanceof File) { const e = new FormData(); e.append(i.name, i.data), u = e; } else if (i instanceof FormData)u = i; else if (i && (typeof i === 'string' || typeof i === 'object' && Object.keys(i).length > 0)) { const e = Object.keys(a); e.length > 0 ? l.headers = { ...a, ...e.indexOf('Content-Type') === -1 ? { 'Content-Type': 'application/json' } : {} } : l.headers = { 'Content-Type': 'application/json' }; const t = l?.headers?.['Content-Type'] || 'application/json'; typeof i === 'object' && (t === 'application/json' ? u = JSON.stringify(i) : t.indexOf('multipart/form-data') > -1 ? u = ot(i) : t.indexOf('application/x-www-form-urlencoded') > -1 && (u = at(i))), t === 'text/plain' && (u = String(i)); } const f = await tt(o, u, l); if (f.originalRequest = { url: o, method: n, ...m }, f?.status >= 200 && f?.status <= 299) { const t = st(s); s === 'submitSuccess' ? e.form.dispatch(new d(f, !0)) : e.form.dispatch(new h(t, f, !0)); } else { e.form.logger.error('Error invoking a rest API'); const t = st(r); r === 'submitError' ? (e.form.dispatch(new c(f, !0)), e.form.dispatch(new p(f, !0))) : e.form.dispatch(new h(t, f, !0)); } }; const at = (e) => { const t = new URLSearchParams(); return Object.entries(e).forEach((([e, n]) => { n != null && typeof n === 'object' ? t.append(e, G(n)) : t.append(e, n); })), t; }; const ot = (e, t) => { const n = new FormData(); Object.entries(e).forEach((([e, t]) => { t != null && typeof t === 'object' ? n.append(e, G(t)) : n.append(e, t); })); const i = (e, t) => { if (e?.data instanceof File) { let n = `${e?.dataRef}/${e?.name}`; n.startsWith('/') || (n = `/${n}`), t.append(n, e.data); } }; return t && Object.keys(t).reduce(((e, s) => { const r = t[s]; return r && r instanceof Array ? [...e, ...r.map(((e) => i(e, n)))] : [...e, i(r, n)]; }), []), n; }; const lt = (e, t = {}, r = !1) => { switch (e) { case 'change': return new s(t); case 'submit': return new m(t); case 'save': return new f(t); case 'click': return new b(t); case 'addItem': return new M(t); case 'removeItem': return new i(t); case 'reset': return new g(t); case 'addInstance': return new v(t); case 'removeInstance': return new y(t); case 'invalid': return new u(t); case 'valid': return new l(t); case 'initialize': return new n(t); case 'focus': return new _(t); default: console.error('invalid action'); } }; class ut {
  static instance = null;

  customFunctions = {};

  constructor() {}

  static getInstance() { return ut.instance || (ut.instance = new ut()), ut.instance; }

  registerFunctions(e) {
    Object.entries(e).forEach((([e, t]) => {
      let n = t; typeof t === 'function' && (n = {
        _func: (e, n, i) => {
          const s = {
            form: i.globals.$form,
            field: i.globals.$field,
            event: i.globals.$event,
            functions: {
              setProperty: (e, t) => { const s = [e, 'custom:setProperty', t]; return ut.getInstance().getFunctions().dispatchEvent._func.call(void 0, s, n, i); }, reset: (e) => { const t = [e = e || 'reset', 'reset']; return i.globals.form.logger.warn('This usage of reset is deprecated. Please see the documentation and update.'), ut.getInstance().getFunctions().dispatchEvent._func.call(void 0, t, n, i); }, validate: (e) => { const t = [e]; return ut.getInstance().getFunctions().validate._func.call(void 0, t, n, i); }, importData: (e, t) => { const s = [e, t]; return ut.getInstance().getFunctions().importData._func.call(void 0, s, n, i); }, exportData: () => ut.getInstance().getFunctions().exportData._func.call(void 0, e, n, i), submitForm: (e, t, s) => { const r = [e, t, s || 'multipart/form-data']; return ut.getInstance().getFunctions().submitForm._func.call(void 0, r, n, i); }, markFieldAsInvalid: (e, t, n) => { !n || n.useId ? i.globals.form.getElement(e)?.markAsInvalid(t) : n && n.useDataRef ? i.globals.form.visit(((n) => { n.dataRef === e && n.markAsInvalid(t); })) : n && n.useQualifiedName && i.globals.form.resolveQualifiedName(e)?.markAsInvalid(t); }, setFocus: (e, t) => { const s = [e, t]; return ut.getInstance().getFunctions().setFocus._func.call(void 0, s, n, i); }, dispatchEvent: (e, t, s, r) => { const a = [e, t, s, r]; return ut.getInstance().getFunctions().dispatchEvent._func.call(void 0, a, n, i); }, getFiles: (e) => { const t = {}; e || i.globals.form.visit(((e) => { e.fieldType === 'file-input' && e.value && (t[e.qualifiedName] = e.serialize()); })); const n = i.globals.form.resolveQualifiedName(e); return n?.fieldType === 'file-input' && n?.value && (t[e] = n.serialize()), t; },
            },
          }; return t(...e, s);
        },
        _signature: [],
      }), n.hasOwnProperty('_func') ? ut.getInstance().customFunctions[e] = n : console.warn(`Unable to register function with name ${e}.`);
    }));
  }

  unregisterFunctions(...e) { e.forEach(((e) => { e in ut.getInstance().customFunctions && delete ut?.getInstance().customFunctions[e]; })); }

  getFunctions() {
    function e(t) { return t == null ? t : (n = t) !== null && Object.prototype.toString.call(n) === '[object Array]' ? t.map(((t) => e(t))) : t.valueOf(); let n; } function t(e) { return e == null ? '' : e.toString(); } const n = {
      validate: { _func: (e, t, n) => { const i = e[0]; let s; return s = typeof i === 'string' || void 0 === i ? n.globals.form.validate() : n.globals.form.getElement(i.$id).validate(), Array.isArray(s) && s.length && n.globals.form.logger.warn('Form Validation Error'), s; }, _signature: [] },
      setFocus: { _func: (e, t, n) => { const i = e[0]; const s = e[1]; try { const e = n.globals.form.getElement(i?.$id) || n.globals.field; n.globals.form.setFocus(e, s); } catch (e) { n.globals.form.logger.error('An error has occurred within the setFocus API.'); } }, _signature: [] },
      getData: { _func: (e, t, n) => (n.globals.form.logger.warn('The `getData` function is depricated. Use `exportData` instead.'), n.globals.form.exportData()), _signature: [] },
      exportData: { _func: (e, t, n) => n.globals.form.exportData(), _signature: [] },
      importData: { _func: (e, t, n) => { const i = e[0]; const s = e[1]; if (typeof i !== 'object' || i === null || s) { const e = n.globals.form.resolveQualifiedName(s); e?.isContainer ? e.importData(i, s) : n.globals.form.logger.error('Invalid argument passed in importData. A container is expected'); } else n.globals.form.importData(i); return {}; }, _signature: [] },
      submitForm: {
        _func: async (n, i, s) => {
          let r; let a; let o; let l = null; let u = null; n.length > 0 && typeof e(n[0]) === 'object' ? (r = n.length > 0 ? e(n[0]) : null, a = !(n.length > 1) || e(n[1]), o = n.length > 2 ? t(n[2]) : 'multipart/form-data') : (s.globals.form.logger.warn('This usage of submitForm is deprecated. Please see the documentation and update'), l = t(n[0]), u = t(n[1]), o = n.length > 2 ? t(n[2]) : 'multipart/form-data', r = n.length > 3 ? e(n[3]) : null, a = !(n.length > 4) || e(n[4])); const d = s.globals.form; if (d.captcha && (d.captcha.captchaDisplayMode === R.INVISIBLE || d.captcha.properties['fd:captcha']?.config?.version === 'enterprise' && d.captcha.properties['fd:captcha']?.config?.keyType === 'score')) { if (typeof s.runtime.functionTable.fetchCaptchaToken?._func !== 'function') return s.globals.form.logger.error('fetchCaptchaToken is not defined'), s.globals.form.dispatch(new c({ type: 'FetchCaptchaTokenNotDefined' })), {}; try { const e = await s.runtime.functionTable.fetchCaptchaToken._func([], i, s); d.captcha.value = e; } catch (e) { return s.globals.form.logger.error('Error while fetching captcha token'), s.globals.form.dispatch(new c({ type: 'FetchCaptchaTokenFailed' })), {}; } } return s.globals.form.dispatch(new m({
            success: l, error: u, submit_as: o, validate_form: a, data: r,
          })), {};
        },
        _signature: [],
      },
      saveForm: { _func: (e, n, i) => { const s = t(e[0]); const r = e[2] || !1; return i.globals.form.dispatch(new f({ action: s, validate_form: r })), {}; }, _signature: [] },
      request: { _func: (n, i, s) => { const r = t(n[0]); const a = t(n[1]); let o; let l; let u; let d = {}; if (n[2] && typeof n[2] === 'object' && !n[2].then && ('data' in n[2] || 'headers' in n[2])) { const t = e(n[2]); o = t.data, d = t.headers || {}, l = e(n[3]), u = e(n[4]); } else o = e(n[2]), typeof n[3] === 'string' ? (s.globals.form.logger.warn('This usage of request is deprecated. Please see the documentation and update'), l = e(n[3]), u = e(n[4])) : (d = e(n[3]), l = e(n[4]), u = e(n[5])); return rt(s.globals, r, a, o, l, u, d); }, _signature: [] },
      awaitFn: { _func: async (e, t, i) => { const s = e[1]; const r = i.globals.$field; try { const a = await e[0]; n.dispatchEvent._func([r, s, a], t, i); } catch (s) { const a = e[2]; a && n.dispatchEvent._func([r, a, s], t, i); } return {}; }, _signature: [] },
      addInstance: { _func: (t, n, i) => { const s = t[0]; const r = t.length > 2 ? e(t[2]) : void 0; try { const e = i.globals.form.getElement(s.$id); const t = lt('addInstance', r); e.addItem(t); } catch (e) { i.globals.form.logger.error('Invalid argument passed in addInstance. An element is expected'); } }, _signature: [] },
      removeInstance: { _func: (t, n, i) => { const s = t[0]; const r = t.length > 2 ? e(t[2]) : void 0; try { const e = i.globals.form.getElement(s.$id); const t = lt('removeInstance', r); e.removeItem(t); } catch (e) { i.globals.form.logger.error('Invalid argument passed in removeInstance. An element is expected'); } }, _signature: [] },
      dispatchEvent: { _func: (t, n, i) => { const s = t[0]; if (s === null && typeof i !== 'string') return i.debug.push('Invalid argument passed in dispatchEvent. An element is expected'), {}; let r; let a = e(t[1]); let o = t.length > 2 ? e(t[2]) : void 0; let l = t.length > 3 && e(t[3]); if (typeof s === 'string' && (o = a, a = s, l = !0), r = a.startsWith('custom:') ? new h(a.substring(7), o, l) : lt(a, o, l), r != null) if (typeof s === 'string')i.globals.form.dispatch(r); else { const e = (e, t, n) => { n.globals.form.getElement(e.$id).dispatch(t); }; Array.isArray(s) && s.length > 0 && void 0 === s.$id ? s.forEach(((t) => { e(t, r, i); })) : e(s, r, i); } return {}; }, _signature: [] },
      encrypt: { _func: async (t, n, i) => e(t[0]), _signature: [] },
      decrypt: { _func: async (t, n, i) => e(t[0]), _signature: [] },
    }; return { ...n, ...ut.getInstance().customFunctions };
  }
} const dt = ut.getInstance(); class ht {
  #e;

  #t;

  #n;

  #i = !0;

  constructor(e) { const t = e.match(/([^.]+)\.([^.]+)(?:\.(.+))?/); if (!t) throw new Error(`Invalid version string ${e}`); if (this.#t = +t[1], this.#e = +t[2], this.#n = t[3] ? +t[3] : 0, isNaN(this.#t) || isNaN(this.#e) || isNaN(this.#n)) throw new Error(`Invalid version string ${e}`); }

  get major() { return this.#t; }

  get minor() { return this.#e; }

  get subversion() { return this.#n; }

  completeMatch(e) { return this.major === e.major && this.minor === e.minor && this.#n === e.subversion; }

  lessThan(e) { return this.major < e.major || this.major === e.major && this.minor < e.minor || this.major === e.major && this.minor === e.minor && this.#n < e.subversion; }

  toString() { return `${this.major}.${this.minor}.${this.subversion}`; }

  valueOf() { return this.toString(); }
} const ct = new ht('0.13'); const pt = new ht('0.13'); class mt extends Be {
  _ruleEngine;

  _eventQueue;

  additionalSubmitMetadata = {};

  _fields = {};

  _ids;

  _invalidFields = [];

  _exportDataAttachmentMap = {};

  promises = [];

  _captcha = null;

  constructor(e, i, a, o = new et(), l = 'off', u = 'create') { super(e, { fieldFactory: i, mode: u }), this._ruleEngine = a, this._eventQueue = o, this._logger = new Ze(l), this._applyDefaultsInModel(), u === 'create' && (this.queueEvent(new n()), this.changeEventBehaviour === 'deps' ? this.queueEvent(new s({ changes: [] })) : this.queueEvent(new t())), this._ids = (function* (e = 50) { const t = function () { const t = []; for (let n = 0; n < e; n++)t.push(me(10)); return t; }; const n = {}; let i = t(); do { let e = i.pop(); for (;e in n;)i.length === 0 && (i = t()), e = i.pop(); n[e] = !0, yield i.pop(), i.length === 0 && (i = t()); } while (i.length > 0); }()), this.bindToDataModel(new K('$form', {})), this._initialize(u), u === 'create' && this.queueEvent(new r()); }

  addPromises(e) { this.promises.push(e); }

  async waitForPromises() { let e = 0; for (;this.promises.length > e;)e = this.promises.length, await Promise.all(this.promises); this.promises = []; }

  _applyDefaultsInModel() { const e = this.specVersion; this._jsonModel.properties = this._jsonModel.properties || {}, this._jsonModel.fieldType = this._jsonModel.fieldType || 'form', (e.lessThan(pt) || typeof this._jsonModel.properties['fd:changeEventBehaviour'] !== 'string') && (this._jsonModel.properties['fd:changeEventBehaviour'] = 'self'); }

  _logger;

  get activeField() { return this._findActiveField(this); }

  _findActiveField(e) { return e?.isContainer ? this._findActiveField(e?.activeChild) : e; }

  get logger() { return this._logger; }

  get changeEventBehaviour() { return this.properties['fd:changeEventBehaviour'] === 'deps' ? 'deps' : 'self'; }

  dataRefRegex = /("[^"]+?"|[^.]+?)(?:\.|$)/g;

  get metaData() { const e = this._jsonModel.metadata || {}; return new We(e); }

  get action() { return this._jsonModel.action; }

  get isFragment() { return !1; }

  importData(e) { this.bindToDataModel(new K('$form', e)), this.syncDataAndFormModel(this.getDataNode()), this._eventQueue.runPendingQueue(); }

  exportData(e = {}) { this._exportDataAttachmentMap = e; const t = this.getDataNode()?.$value; return this._exportDataAttachmentMap = {}, t; }

  setAdditionalSubmitMetadata(e) { this.additionalSubmitMetadata = { ...this.additionalSubmitMetadata, ...e }; }

  get specVersion() { if (typeof this._jsonModel.adaptiveform !== 'string') return ct; try { return new ht(this._jsonModel.adaptiveform); } catch (e) { return console.log(e), console.log(`Falling back to default version${ct.toString()}`), ct; } }

  resolveQualifiedName(e) { let t = null; return this.visit(((n) => { n.qualifiedName === e && (t = n); })), t; }

  exportSubmitMetaData() { const e = {}; this.visit(((t) => { t.fieldType === 'captcha' && (e[t.qualifiedName] = t.value); })); const t = this.properties['fd:draftId'] || ''; t && this.setAdditionalSubmitMetadata({ 'fd:draftId': t }); const n = { lang: this.lang, captchaInfo: e, ...this.additionalSubmitMetadata }; return new Je(n); }

  #s(e) { return e.filter(((e) => !0 === e.visible)); }

  #r(e) { const t = this.#s(e.items); return t ? t[0] : null; }

  #a(e) { if (!e.isContainer) { return void (e.parent.activeChild = e); } this.#o(e); let t = e.activeChild; t = t === null ? this.#r(e) : e.activeChild, this.#a(t); }

  #l(e, t) { return e < t.length - 1 ? t[e + 1] : null; }

  #u(e, t) { return e > 0 ? t[e - 1] : null; }

  #o(e) { const t = e.parent; t != null && t.activeChild != null && (t.activeChild = null); }

  setFocus(e, t) { const n = this._ruleEngine.getDependencyTracking(); this._ruleEngine.setDependencyTracking(!1); try { if (!t) return this.#o(e), void this.#a(e); const n = e?.isContainer ? e : e.parent; const i = this.#s(n.items); let s = n.activeChild; let r = s !== null ? i.indexOf(s) : -1; if (n.activeChild === null) return this.#a(i[0]), void (r = 0); t === k.NEXT_ITEM ? s = this.#l(r, i) : t === k.PREVIOUS_ITEM && (s = this.#u(r, i)), s !== null && this.#a(s); } finally { this._ruleEngine.setDependencyTracking(n); } }

  getState(e = !1) { const t = this; const n = super.getState(!1, e); return n.id = '$form', Object.defineProperty(n, 'data', { get() { return t.exportData(); } }), Object.defineProperty(n, 'attachments', { get() { return _e(t); } }), n; }

  get type() { return 'object'; }

  isTransparent() { return !1; }

  get form() { return this; }

  get ruleEngine() { return this._ruleEngine; }

  getUniqueId() { return this._ids == null ? '' : this._ids.next().value; }

  fieldAdded(e) { e.fieldType !== 'captcha' || this._captcha || (this._captcha = e), this._fields[e.id] = e, e.subscribe(((e) => { this._invalidFields.indexOf(e.target.id) === -1 && this._invalidFields.push(e.target.id); }), 'invalid'), e.subscribe(((e) => { const t = this._invalidFields.indexOf(e.target.id); t > -1 && this._invalidFields.splice(t, 1); }), 'valid'), e.subscribe(((e) => { const t = e.target.getState(); if (e.payload.changes.length > 0 && t) { const n = (e) => (e && typeof e === 'object' ? Array.isArray(e) ? e.map(n) : { ...e } : e); const i = e.payload.changes.map((({ propertyName: e, currentValue: t, prevValue: i }) => ({ propertyName: e, currentValue: n(t), prevValue: n(i) }))); const s = new a(i, t, e.payload.eventSource); this.notifyDependents(s); } })); }

  visit(e) { this.traverseChild(this, e); }

  traverseChild(e, t) { e.items.forEach(((e) => { e.isContainer && this.traverseChild(e, t), t(e); })); }

  validate() { const e = super.validate(); return this.dispatch(new o(e)), e; }

  isValid() { return this._invalidFields.length === 0; }

  dispatch(e) { e.type === 'submit' ? (super.queueEvent(e), this._eventQueue.runPendingQueue()) : super.dispatch(e); }

  submit(e, t) { const n = e?.payload?.validate_form; if (!1 === n || this.validate().length === 0) { const n = e?.payload || {}; const i = n?.success ? n?.success : 'submitSuccess'; const s = n?.error ? n?.error : 'submitError'; const r = n.action || this.action; const a = n.metadata || { submitMetadata: this.exportSubmitMetaData() }; (async (e, t, n, i = 'multipart/form-data', s = null, r = '', a = null) => { const o = r || e.form.action; let l = s; const u = await ge(e.form, !0); typeof l === 'object' && l != null || (l = e.form.exportData(u)); let d = i; const h = { data: l, ...a }; let c = h; (Object.keys(u).length > 0 || i === 'multipart/form-data') && (c = ot(h, u), d = 'multipart/form-data'), await rt(e, o, 'POST', c, t, n, { 'Content-Type': d }); })(t, i, s, n?.save_as || n?.submit_as, n?.data, r, a); } }

  save(e, t) { const n = e?.payload || {}; n.save_as = 'multipart/form-data', n.metadata = { draftMetadata: { lang: this.lang, 'fd:draftId': this.properties['fd:draftId'] || '' } }, n.success = 'custom:saveSuccess', n.error = 'custom:saveError', this.submit(e, t), this.subscribe(((e) => { this._saveSuccess(e); }), 'saveSuccess'); }

  _saveSuccess(e) { const t = e?.payload?.body?.draftId || ''; const n = this.properties; t && n && (n['fd:draftId'] = t); }

  reset() { super.reset(), this._invalidFields = []; }

  getElement(e) { return e == this.id ? this : this._fields[e]; }

  get qualifiedName() { return '$form'; }

  getEventQueue() { return this._eventQueue; }

  get name() { return '$form'; }

  get value() { return null; }

  get id() { return this._jsonModel.id || '$form'; }

  get title() { return this._jsonModel.title || ''; }

  get captcha() { return this._captcha; }
} function ft(e) { if (e == null) { const t = (new Intl.DateTimeFormat()).resolvedOptions(); e = t.locale; } return (t) => (function (e, t) { if (e === null) return 0; const n = +e; if (!isNaN(n)) return n; if (t) { const n = x(e, t, !0); if (n !== e) return I(n); } return 0; }(t, e)); } class gt {
  _context;

  _globalNames = ['$form', '$field', '$event'];

  customFunctions;

  debugInfo = [];

  dependencyTracking = !0;

  constructor() { this.customFunctions = dt.getFunctions(); }

  compileRule(e, t) { const n = new j(this.customFunctions, ft(t), this.debugInfo); return { formula: n, ast: n.compile(e, this._globalNames) }; }

  execute(e, t, n, i = !1, s) { const { formula: r, ast: a } = e; const o = this._context; let l; this._context = n; try { l = r.run(a, t, 'en-US', n); } catch (e) { this._context?.form?.logger?.error(e); } if (this.debugInfo.length) for (this._context?.form?.logger?.warn(`Form rule expression string: ${s}`); this.debugInfo.length > 0;) this._context?.form?.logger?.warn(this.debugInfo.pop()); let u = l; return i && typeof l === 'object' && l !== null && (u = Object.getPrototypeOf(l).valueOf.call(l)), this._context = o, u; }

  trackDependency(e) { this.dependencyTracking && this._context && void 0 !== this._context.field && this._context.field !== e && e._addDependent(this._context.field); }

  setDependencyTracking(e) { this.dependencyTracking = e; }

  getDependencyTracking() { return this.dependencyTracking; }
} class _t extends Be {
  constructor(e, i) { super(e, i), i.mode !== 'restore' && (this._applyDefaults(), this.queueEvent(new n()), this.queueEvent(new t())); }

  _getDefaults() {
    return {
      ...super._getDefaults(), visible: !0, required: !1, label: { visible: !0, richText: !1 },
    };
  }

  _applyDefaults() { super._applyDefaultsInModel(), this._jsonModel.dataRef && void 0 === this._jsonModel.type && (this._jsonModel.type = 'object'); }

  get type() { const e = super.type; if (e === 'array' || e === 'object') return e; }

  get items() { return super.items ? super.items : []; }

  get value() { return this.getDataNode()?.$value; }

  get fieldType() { return 'panel'; }
} class yt extends _t {
  get maxOccur() { return this._jsonModel.maxItems; }

  set maxOccur(e) { this.maxItems = e; }

  get minOccur() { return this.minItems; }

  addInstance(e) { return this.addItem(e); }

  removeInstance(e) { return this.removeItem(e); }
}N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], yt.prototype, 'maxOccur', null), N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], yt.prototype, 'minOccur', null); const vt = ['string', 'number', 'integer', 'boolean', 'file', 'string[]', 'number[]', 'integer[]', 'boolean[]', 'file[]', 'array', 'object']; class Mt extends Qe {
  constructor(e, i) { super(e, i), i.mode !== 'restore' && (this._applyDefaults(), this.queueEvent(new n()), this.form.changeEventBehaviour === 'deps' ? this.queueEvent(new s({ changes: [] })) : this.queueEvent(new t())); }

  _ruleNodeReference = [];

  _initialize() { super._initialize(), this.setupRuleNode(); }

  ruleNodeReference() { return this.type?.endsWith('[]') ? this._ruleNodeReference = [] : this._ruleNodeReference = this, this._ruleNodeReference; }

  _getDefaults() {
    return {
      readOnly: !1, enabled: !0, visible: !0, label: { visible: !0, richText: !1 }, required: !1, type: this._getFallbackType(),
    };
  }

  _getFallbackType() {
    const e = this._jsonModel.type; let t = e; if (typeof e !== 'string' || vt.indexOf(e) === -1) {
      const e = this.enum; if (t = typeof e?.[0], t === 'undefined' && void 0 !== this._jsonModel.default && (t = this._jsonModel.default instanceof Array && this._jsonModel.default.length > 0 ? `${typeof this._jsonModel.default[0]}[]` : typeof this._jsonModel.default), t.indexOf('undefined') === 0) {
        t = {
          'text-input': 'string', 'multiline-input': 'string', 'number-input': 'number', 'date-input': 'string', email: 'string', 'plain-text': 'string', image: 'string', checkbox: 'boolean',
        }[this.fieldType];
      }
    } return t;
  }

  _applyDefaults() { super._applyDefaultsInModel(), this.coerceParam('required', 'boolean'), this.coerceParam('readOnly', 'boolean'), this.coerceParam('enabled', 'boolean'); const e = this._jsonModel.type; typeof e === 'string' && vt.indexOf(e) !== -1 || (this._jsonModel.type = this._getFallbackType()), ['plain-text', 'image'].indexOf(this.fieldType) === -1 ? this._jsonModel.value = void 0 : this.fieldType === 'image' ? this._jsonModel.value = this._jsonModel?.properties?.['fd:repoPath'] ?? this._jsonModel.value : this._jsonModel.default = this._jsonModel.default || this._jsonModel.value; if (void 0 === this._jsonModel.value) { const e = Ae.type(this.getInternalType() || 'string', this._jsonModel.default); this._jsonModel.value = e.value; } if (this._jsonModel.type !== 'string' && this.unset('emptyValue'), void 0 === this._jsonModel.fieldType && (this.form.logger.debug('fieldType property is mandatory. Please ensure all the fields have a fieldType'), this._jsonModel.viewType ? (this._jsonModel.viewType.startsWith('custom:') ? this.form.logger.error('viewType property has been removed. For custom types, use :type property') : this.form.logger.error('viewType property has been removed. Use fieldType property'), this._jsonModel.fieldType = this._jsonModel.viewType) : this._jsonModel.fieldType = L(this._jsonModel)), void 0 === this._jsonModel.enum) { this._jsonModel.type === 'boolean' && (this._jsonModel.enum = [!0, !1]); } else for (void 0 === this._jsonModel.enumNames && (this._jsonModel.enumNames = this._jsonModel.enum.map(((e) => e.toString()))); this._jsonModel.enumNames.length < this._jsonModel.enum.length;) this._jsonModel.enumNames.push(this._jsonModel.enum[this._jsonModel.enumNames.length].toString()); const t = ['minimum', 'maximum', 'exclusiveMinimum', 'exclusiveMaximum']; this._jsonModel.type !== 'string' ? this.unset('format', 'pattern', 'minLength', 'maxLength') : this._jsonModel.fieldType === 'date-input' && (this._jsonModel.format = 'date'), this.coerceParam('minLength', 'number'), this.coerceParam('maxLength', 'number'), this._jsonModel.type !== 'number' && this._jsonModel.format !== 'date' && this._jsonModel.type !== 'integer' && this.unset('step', ...t), t.forEach(((e) => { this.coerceParam(e, this._jsonModel.type === 'integer' ? 'number' : this._jsonModel.type); })), typeof this._jsonModel.step !== 'number' && this.coerceParam('step', 'number'); }

  unset(...e) { e.forEach(((e) => this._jsonModel[e] = void 0)); }

  coerceParam(e, t) { const n = this._jsonModel[e]; if (void 0 !== n && typeof n !== t) { this.form.logger.info(`${e} is not of type ${t}. Trying to coerce.`); try { this._jsonModel[e] = ((e, t) => { let n; switch (t) { case 'string': return `${e}`; case 'number': if (n = +e, !isNaN(n)) return n; break; case 'boolean': if (typeof e === 'string') return e === 'true'; if (typeof e === 'number') return e !== 0; } throw `${e} has invalid type. Expected : ${t}, Actual ${typeof e}`; })(n, t); } catch (t) { this.form.logger.warn(t), this.unset(e); } } }

  get editFormat() { return this.withCategory(this._jsonModel.editFormat); }

  get displayFormat() { return this.withCategory(this._jsonModel.displayFormat); }

  get displayValueExpression() { return this._jsonModel.displayValueExpression; }

  get placeholder() { return this._jsonModel.placeholder; }

  get readOnly() { return void 0 !== this.parent.readOnly && !0 === this.parent.readOnly || this._jsonModel.readOnly; }

  set readOnly(e) { this._setProperty('readOnly', e); }

  get enabled() { const e = this.parent?.enabled; return void 0 !== e ? !!e && this._jsonModel.enabled : this._jsonModel.enabled; }

  set enabled(e) { this._setProperty('enabled', e); }

  get valid() { return this._jsonModel?.validity?.valid; }

  set valid(e) { const t = { valid: e, ...e ? {} : { customConstraint: !0 } }; this._setProperty('valid', e), this._setProperty('validity', t); }

  get validity() { return this._jsonModel.validity; }

  get emptyValue() { return this._jsonModel.emptyValue === 'null' ? null : this._jsonModel.emptyValue === '' && this.type === 'string' ? '' : void 0; }

  get enum() { return this._jsonModel.enum; }

  set enum(e) { this._setProperty('enum', e); }

  get enumNames() { return this._jsonModel.enumNames; }

  set enumNames(e) { this._setProperty('enumNames', e); }

  get required() { return this._jsonModel.required || !1; }

  set required(e) { this._setProperty('required', e); }

  get maximum() { if (this.type === 'number' || this.format === 'date' || this.type === 'integer') return this._jsonModel.maximum; }

  set maximum(e) { this.type !== 'number' && this.format !== 'date' && this.type !== 'integer' || this._setProperty('maximum', e); }

  get minimum() { if (this.type === 'number' || this.format === 'date' || this.type === 'integer') return this._jsonModel.minimum; }

  set minimum(e) { this.type !== 'number' && this.format !== 'date' && this.type !== 'integer' || this._setProperty('minimum', e); }

  withCategory(e) { if (e) { const t = e?.match(/^(?:date|num)\|/); if (t === null) return this.format === 'date' ? e = `date|${e}` : this.type !== 'number' && this.type !== 'integer' || (e = `num|${e}`), e; } return e; }

  get editValue() { const e = this.editFormat; if (!e || !this.isNotEmpty(this.value) || !1 === this.valid) return this.value; try { return E(this.value, this.lang, e); } catch (e) { return this.value; } }

  get displayValue() { if (this.displayValueExpression && typeof this.displayValueExpression === 'string' && this.displayValueExpression.length !== 0) return this.executeExpression(this.displayValueExpression); const e = this.displayFormat; if (!e || !this.isNotEmpty(this.value) || !0 === this?.validity?.typeMismatch) return this.value; try { return E(this.value, this.lang, e); } catch (e) { return this.value; } }

  getDataNodeValue(e) { return this.isEmpty() ? this.emptyValue : e; }

  updateDataNodeAndTypedValue(e) { const t = this.getDataNode(); if (Re.indexOf(this.fieldType) > -1 && void 0 !== t && t !== J) return; const n = this._getConstraintObject().type(this.getInternalType() || 'string', e); const i = this._setProperty('value', n.value, !1); return i.length > 0 && (this._updateRuleNodeReference(n.value), void 0 !== t && t.setValue(this.getDataNodeValue(this._jsonModel.value), this._jsonModel.value, this)), i; }

  get value() { return void 0 === this._jsonModel.value ? null : this._jsonModel.value; }

  set value(e) { const t = this.updateDataNodeAndTypedValue(e); let n = { valid: !0 }; let i = 'type'; if (t?.length > 0) { let r = {}; const a = Ae.type(this.getInternalType() || 'string', e); if (this.parent.uniqueItems && this.parent.type === 'array' && (n = Ae.uniqueItems(this.parent.uniqueItems, this.parent.getDataNode().$value), i = 'uniqueItems'), a.valid && n.valid)r = this.evaluateConstraints(); else { const e = a.valid && n.valid; const t = { valid: e, errorMessage: a.valid && n.valid ? '' : this.getErrorMessage('type'), ...e ? {} : { validationMessage: e ? '' : this.getErrorMessage(i), validity: { valid: e, [S[i]]: !0 } } }; r = this._applyUpdates(['valid', 'errorMessage', 'validationMessage', 'validity'], t); }r.valid && this.triggerValidationEvent(r); const o = new s({ changes: t.concat(Object.values(r)), eventSource: this._eventSource }); this.dispatch(o); } }

  uiChange(e) { this._eventSource = F.UI, 'value' in e.payload ? this.value = e.payload.value : 'checked' in e.payload && (this.checked = e.payload.checked), this._eventSource = F.CODE; }

  reset() {
    const e = this.updateDataNodeAndTypedValue(this.default); if (!e) return; const t = {
      valid: void 0, errorMessage: '', validationMessage: '', validity: { valid: void 0 },
    }; const n = this._applyUpdates(['valid', 'errorMessage', 'validationMessage', 'validity'], t); const i = new s({ changes: e.concat(Object.values(n)) }); this.dispatch(i);
  }

  _updateRuleNodeReference(e) { if (this.type?.endsWith('[]')) if (e != null) for (e.forEach(((e, t) => { this._ruleNodeReference[t] = e; })); e.length !== this._ruleNodeReference.length;) this._ruleNodeReference.pop(); else for (;this._ruleNodeReference.length !== 0;) this._ruleNodeReference.pop(); }

  getInternalType() { return this.type; }

  valueOf() { const e = this[Ve]; const t = void 0 === e ? this : e; return t.ruleEngine.trackDependency(t), t._jsonModel.value || null; }

  toString() { const e = this[Ve]; const t = void 0 === e ? this : e; return t._jsonModel.value?.toString() || ''; }

  getErrorMessage(e) { const t = e; const n = S[t]; const i = { ...C, ...A }; return this._jsonModel.constraintMessages?.[t === 'exclusiveMaximum' ? 'maximum' : t === 'exclusiveMinimum' ? 'minimum' : t] || ((e, t = []) => e?.replace(/\${(\d+)}/g, ((e, n) => { const i = t[n]; return void 0 !== i ? i : e; })))(i[n], [this._jsonModel[t]]); }

  get errorMessage() { return this._jsonModel.errorMessage; }

  set errorMessage(e) { this._setProperty('errorMessage', e), this._setProperty('validationMessage', e); }

  _getConstraintObject() { return Ae; }

  isArrayType() { return !!this.type && this.type.indexOf('[]') > -1; }

  checkEnum(e, t) { if (!0 === this._jsonModel.enforceEnum && e != null) { const n = t.enum; return e instanceof Array && this.isArrayType() ? e.every(((e) => n(this.enum || [], e).valid)) : n(this.enum || [], e).valid; } return !0; }

  checkStep() { const e = this._jsonModel.value; const t = this._jsonModel.step; if (typeof t === 'number') { const n = t.toString().split('.')?.[1]?.length || 0; const i = 10 ** n; const s = t * i; const r = e * i; const a = (this._jsonModel.minimum || this._jsonModel.default || 0) * i; const o = (r - a) / s; const l = Math.abs(r - a) % s < 0.001; let u; let d; return l || (u = (Math.ceil(o) * s + a) / i, d = (u - s) / i), { valid: l, next: u, prev: d }; } return { valid: !0 }; }

  checkValidationExpression() { const e = this._jsonModel.validationExpression; return typeof e !== 'string' || e.length === 0 || this.executeExpression(e); }

  getConstraints() { switch (this.type) { case 'string': switch (this.format) { case 'date': return Se.date; case 'email': return Se.email; case 'binary': case 'data-url': return Se.file; default: return Se.string; } case 'file': return Se.file; case 'number': case 'integer': return Se.number; } return this.isArrayType() ? Se.array : []; }

  get format() { if (void 0 === this._jsonModel.format && this.type === 'string') switch (this.fieldType) { case 'date-input': this._jsonModel.format = 'date'; break; case 'file-input': this._jsonModel.format = 'data-url'; } return this._jsonModel.format; }

  get enforceEnum() { return this._jsonModel.enforceEnum; }

  get tooltip() { return this._jsonModel.tooltip; }

  get maxLength() { return this._jsonModel.maxLength; }

  get minLength() { return this._jsonModel.minLength; }

  get pattern() { return this._jsonModel.pattern; }

  get step() { if (this.type === 'number' || this.format === 'date') return this._jsonModel.step; }

  get exclusiveMinimum() { if (this.type === 'number' || this.format === 'date' || this.type === 'integer') return this._jsonModel.exclusiveMinimum; }

  set exclusiveMinimum(e) { this.type !== 'number' && this.format !== 'date' && this.type !== 'integer' || (this._jsonModel.exclusiveMinimum = e); }

  get exclusiveMaximum() { if (this.type === 'number' || this.format === 'date' || this.type === 'integer') return this._jsonModel.exclusiveMaximum; }

  set exclusiveMaximum(e) { this.type !== 'number' && this.format !== 'date' && this.type !== 'integer' || (this._jsonModel.exclusiveMaximum = e); }

  get default() { return this._jsonModel.default; }

  isNotEmpty(e) { return e != null && e !== ''; }

  evaluateConstraints() {
    let e = 'type'; const t = this._jsonModel; const n = this._jsonModel.value; const i = this._getConstraintObject(); const s = this.getConstraints(); let r = !0; if (r && (r = i.required(this.required, n).valid && (!this.isArrayType() || !this.required || n.length > 0), e = 'required'), r && this.isNotEmpty(n)) { const a = s.find(((e) => { if (e in t && void 0 !== t[e]) { const s = t[e]; const r = i[e]; return n instanceof Array && this.isArrayType() ? Se.array.indexOf(e) !== -1 ? !r(s, n).valid : n.some(((e) => !r(s, e).valid)) : typeof r === 'function' && !r(s, n).valid; } return !1; })); a != null ? (r = !1, e = a) : (r = this.checkEnum(n, i), e = 'enum', r && this.type === 'number' && (r = this.checkStep().valid, e = 'step'), r && (r = this.checkValidationExpression(), e = 'validationExpression')); }r || this.form.logger.info(`${e} constraint evaluation failed ${this._jsonModel[e]}. Received ${this._jsonModel.value}`); const a = {
      valid: r, errorMessage: r ? '' : this.getErrorMessage(e), validationMessage: r ? '' : this.getErrorMessage(e), validity: { valid: r, ...r ? {} : { [S[e]]: !0 } },
    }; return this._applyUpdates(['valid', 'errorMessage', 'validationMessage', 'validity'], a);
  }

  triggerValidationEvent(e) { e.validity && this.#d(); }

  #d() { this.validity.valid ? this.dispatch(new l()) : this.dispatch(new u()); }

  validate() { if (!1 === this.visible) return []; if (!1 === this.valid && this.errorMessage && this?.validity?.customConstraint) return [new P(this.id, [this._jsonModel.errorMessage])]; const e = this.evaluateConstraints(); return this.#d(), e.validity && this.notifyDependents(new s({ changes: Object.values(e) })), this.valid ? [] : [new P(this.id, [this._jsonModel.errorMessage])]; }

  syncDataAndFormModel(t) { if (void 0 !== t && t !== J && t.$value !== this._jsonModel.value) { const n = e('value', t.$value, this._jsonModel.value); this._jsonModel.value = t.$value, this.queueEvent(n); } }

  defaultDataModel(e) { const t = Re.indexOf(this.fieldType) > -1 ? void 0 : this.getDataNodeValue(this._jsonModel.value); return new X(e, t, this.type || 'string'); }

  getState(e = !1, t = !1) {
    return {
      ...super.getState(t), editFormat: this.editFormat, displayFormat: this.displayFormat, editValue: this.editValue, displayValue: this.displayValue, enabled: this.enabled, readOnly: this.readOnly,
    };
  }

  markAsInvalid(e, t = null) {
    const n = {
      valid: !1, errorMessage: e, validationMessage: e, validity: { valid: !1, ...t != null ? { [S[t]]: !0 } : { customConstraint: !0 } },
    }; const i = this._applyUpdates(['valid', 'errorMessage', 'validationMessage', 'validity'], n); const r = new s({ changes: [].concat(Object.values(i)) }); r.payload.changes.length !== 0 && (this.triggerValidationEvent(i), this.dispatch(r));
  }
} function bt(e, t) { return e.replace(';base64', `;name=${encodeURIComponent(t)};base64`); } async function jt(e) {
  const { name: t, size: n, type: i } = e; return await new Promise(((s, r) => {
    const a = new FileReader(); a.onload = (e) => {
      s(new he({
        data: bt(e.target.result, t), type: i, name: t, size: n,
      }));
    }, a.readAsDataURL(e.data);
  }));
}N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }, Le('button', 'image', 'plain-text')], Mt.prototype, 'readOnly', null), N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }, Le('image', 'plain-text')], Mt.prototype, 'enabled', null), N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], Mt.prototype, 'valid', null), N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], Mt.prototype, 'validity', null), N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], Mt.prototype, 'enum', null), N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], Mt.prototype, 'enumNames', null), N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], Mt.prototype, 'required', null), N([ze('date-input', 'number-input')], Mt.prototype, 'editValue', null), N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], Mt.prototype, 'value', null), N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], Mt.prototype, 'errorMessage', null), N([ze('text-input', 'date-input', 'file-input', 'email')], Mt.prototype, 'format', null), N([ze('text-input')], Mt.prototype, 'maxLength', null), N([ze('text-input')], Mt.prototype, 'minLength', null), N([ze('text-input')], Mt.prototype, 'pattern', null), N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], Mt.prototype, 'exclusiveMinimum', null), N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], Mt.prototype, 'exclusiveMaximum', null); class Et extends Mt {
  _getDefaults() { return { ...super._getDefaults(), accept: ['audio/*', 'video/*', 'image/*', 'text/*', 'application/pdf'], maxFileSize: '2MB' }; }

  _getFallbackType() { return 'file'; }

  get maxFileSize() { return ye(this._jsonModel.maxFileSize); }

  get accept() { return this._jsonModel.accept; }

  _applyUpdates(e, t) { return e.reduce(((e, n) => { const i = this._jsonModel[n]; const s = t[n]; return s !== i && (e[n] = { propertyName: n, currentValue: s, prevValue: i }, this._jsonModel[n] = i instanceof he && typeof s === 'object' && n === 'value' ? new he({ ...i, data: s.data }) : s), e; }), {}); }

  getInternalType() { return this.type?.endsWith('[]') ? 'file[]' : 'file'; }

  getDataNodeValue(e) { let t = e; return t != null && (this.type === 'string' ? t = t.data?.toString() : this.type === 'string[]' && (t = t instanceof Array ? t : [t], t = t.map(((e) => e?.data?.toString())))), t; }

  async serialize() { const e = this._jsonModel.value; if (void 0 === e) return null; let t; return await (t = e instanceof Array ? e : [e], Promise.all([].map.call(t, jt))); }

  syncDataAndFormModel(t) { if (void 0 !== t && t !== J) { const n = t?.$value; if (n != null) { const t = Ae.type(this.getInternalType(), n); t.valid || this.form.logger.debug(`unable to bind ${this.name} to data`), this.form.getEventQueue().queue(this, e('value', t.value, this._jsonModel.value)), this._jsonModel.value = t.value; } else this._jsonModel.value = null; } }
} class xt extends Mt {
  offValue() { const e = this.enum; return e.length > 1 ? e[1] : null; }

  _getConstraintObject() { const e = { ...super._getConstraintObject() }; let t; return e.required = (t = this.offValue(), (e, n) => ({ valid: Ae.required(e, n).valid && (!e || n != t), value: n })), e; }

  _applyDefaults() { typeof this._jsonModel.checked === 'boolean' && (this._jsonModel.checked ? this._jsonModel.default = this._jsonModel.enum?.[0] : this._jsonModel.default = this._jsonModel.enum?.[1]), super._applyDefaults(); }

  _getDefaults() { return { ...super._getDefaults(), enforceEnum: !0 }; }

  get enum() { return this._jsonModel.enum || []; }

  updateDataNodeAndTypedValue(e) { const t = super.updateDataNodeAndTypedValue(e); const n = t.find(((e) => e.propertyName === 'value')); if (n) { const e = n.prevValue === this._jsonModel.enum?.[0]; const i = n.currentValue === this._jsonModel.enum?.[0]; e !== i && t.push({ propertyName: 'checked', prevValue: e, currentValue: i }); } return t; }

  set checked(e) { this.value = e ? this._jsonModel.enum?.[0] : this._jsonModel.enum?.[1]; }

  get checked() { return this.value === this._jsonModel.enum?.[0]; }

  getState(e = !1, t = !1) { return { ...super.getState(e, t), checked: this.checked }; }
}N([function (e, t, n) { const i = n.get; i != null && (n.get = function () { return this.ruleEngine.trackDependency(this), i.call(this); }); }], xt.prototype, 'checked', null); class It extends Mt {
  constructor(e, t) { super(e, t); }

  _getFallbackType() { const e = super._getFallbackType(); return typeof e === 'string' ? `${e}[]` : 'string[]'; }

  _getDefaults() { return { ...super._getDefaults(), enforceEnum: !0, enum: [] }; }
} class Tt extends Mt {
  locale;

  _dataFormat = 'yyyy-MM-dd';

  _applyDefaults() { super._applyDefaults(), this.locale = (new Intl.DateTimeFormat()).resolvedOptions().locale, this._jsonModel.editFormat || (this._jsonModel.editFormat = 'short'), this._jsonModel.displayFormat || (this._jsonModel.displayFormat = this._jsonModel.editFormat), this._jsonModel.placeholder || (this._jsonModel.placeholder = T(this._jsonModel.editFormat, this.locale)); }

  #h(e) { const t = w(e); return isNaN(t) ? null : D(t, this.locale, this._dataFormat); }

  get value() { return super.value; }

  set value(e) { if (typeof e === 'number') { const t = this.#h(e); t && (super.value = t); } else if (this._jsonModel.editFormat !== 'short' && this._jsonModel.editFormat !== 'date|short') { const t = $(e, this.locale, this._jsonModel.editFormat) || $(e, this.locale, 'yyyy-MM-dd'); t instanceof Date ? super.value = D(t, this.locale, this._dataFormat) : super.value = e; } else super.value = e; }

  get minimum() { return super.minimum; }

  set minimum(e) { if (typeof e === 'number') { const t = this.#h(e); t && (super.minimum = t); } else typeof e === 'string' && (super.minimum = e); }

  get maximum() { return super.maximum; }

  set maximum(e) { if (typeof e === 'number') { const t = this.#h(e); t && (super.maximum = t); } else typeof e === 'string' && (super.maximum = e); }
} class wt extends Mt {_getDefaults() { return { ...super._getDefaults(), format: 'email' }; }} class Dt extends Mt {
  _captchaDisplayMode;

  _captchaProvider;

  _captchaSiteKey;

  constructor(e, t) { super(e, t), this._captchaDisplayMode = e.captchaDisplayMode, this._captchaProvider = e.captchaProvider, this._captchaSiteKey = e.captchaSiteKey; }

  getDataNode() {}

  custom_setProperty(e) { this.applyUpdates(e.payload); }

  get captchaDisplayMode() { return this._captchaDisplayMode; }

  get captchaProvider() { return this._captchaProvider; }

  get captchaSiteKey() { return this._captchaSiteKey; }
} class $t extends Mt {click() { if (!this._events?.click && this._jsonModel.buttonType) return this._jsonModel.buttonType === 'submit' ? this.form.dispatch(new m({ validate_form: !0 })) : this._jsonModel.buttonType === 'reset' ? this.form.dispatch(new g()) : void 0; }} const Nt = {
  text: 'text-input', number: 'number-input', email: 'email', file: 'file-input', range: 'range', textarea: 'multiline-input',
}; const Ot = new class {
  createField(e, t) {
    let n; const i = { ...t, fieldFactory: this }; if (e.fieldType = e.fieldType ? e.fieldType in Nt ? Nt[e.fieldType] : e.fieldType : 'text-input', B(e)) {
      const t = {
        ...e, ...'items' in e && { type: 'object' }, minOccur: void 0, maxOccur: void 0, repeatable: void 0, name: void 0,
      }; const s = {
        minItems: e.minOccur || 0, maxItems: e.maxOccur || -1, fieldType: e.fieldType, type: 'array', name: e.name, dataRef: e.dataRef, events: { 'custom:setProperty': '$event.payload' }, items: [t],
      }; n = new yt(s, i);
    } else 'items' in e || e.fieldType === 'panel' ? n = new _t(e, i) : H(e) || e.fieldType === 'file-input' ? n = new Et(e, i) : (s = e, n = (s?.fieldType || L(s)) === 'checkbox' ? new xt(e, i) : (function (e) { return (e?.fieldType || L(e)) === 'checkbox-group'; }(e)) ? new It(e, i) : (function (e) { const t = e?.fieldType || L(e); return t === 'text-input' && e?.format === 'email' || t === 'email'; }(e)) ? new wt(e, i) : (function (e) { const t = e?.fieldType || L(e); return t === 'text-input' && e?.format === 'date' || t === 'date-input'; }(e)) ? new Tt(e, i) : (function (e) { return (e?.fieldType || L(e)) === 'captcha'; }(e)) ? new Dt(e, i) : (function (e) { return e?.fieldType === 'button'; }(e)) ? new $t(e, i) : new Mt(e, i)); let s; return n;
  }
}(); const St = (e, t, n) => { let i = n; i == null && (e = je(e), i = new mt({ ...e }, Ot, new gt(), new et(new Ze(t)), t)); const s = e?.data; return s && i.importData(s), i; }; const Ct = (e, t, n = 'error', i = void 0) => { try { const s = St(e, n, i); return typeof t === 'function' && t(s), s.getEventQueue().runPendingQueue(), s; } catch (e) { throw console.error(`Unable to create an instance of the Form ${e}`), new Error(e); } }; const
  At = async (e, t, n = 'error', i = void 0) => { try { const s = St(e, n, i); return typeof t === 'function' && t(s), s.getEventQueue().runPendingQueue(), await s.waitForPromises(), s; } catch (e) { throw console.error(`Unable to create an instance of the Form ${e}`), new Error(e); } }; Ct.currentVersion = ct; const Ft = { logLevel: 'error' }; const kt = (e, t = null, { logLevel: n } = Ft) => { try { const i = new mt({ ...e }, Ot, new gt(), new et(new Ze(n)), n, 'restore'); return t && (i.bindToDataModel(new K('$form', t)), i.syncDataAndFormModel(i.getDataNode())), i.getEventQueue().empty(), i; } catch (e) { throw console.error(`Unable to restore an instance of the Form ${e}`), new Error(e); } }; const Rt = (e, t) => { try { const n = new mt({ ...e }, Ot, new gt()); return t && n.importData(t), n.validate().length === 0; } catch (e) { throw new Error(e); } }; const Pt = (e, t) => { try { const n = new mt({ ...e }, Ot, new gt()); t && n.importData(t); const i = n.validate(); return { messages: i, valid: i.length === 0 }; } catch (e) { throw new Error(e); } }; const Vt = (e, t = {}) => { const n = new Headers(); return Object.entries(t).forEach((([e, t]) => { n.append(e, t); })), new Promise(((n, i) => { tt(`${e}.model.json`, null, { headers: t }).then(((e) => { if (e.status !== 200)i('Not Found'); else { let t = e.body; if ('model' in t) { const { model: e } = t; t = e; }n(G(t)); } })); })); }; const qt = (e) => { dt.registerFunctions(e); }; export {
  Ct as createFormInstance, At as createFormInstanceSync, Vt as fetchForm, qt as registerFunctions, kt as restoreFormInstance, Pt as validateFormData, Rt as validateFormInstance,
};
